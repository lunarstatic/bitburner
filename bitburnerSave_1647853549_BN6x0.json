{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":107,\"hp\":12,\"max_hp\":25,\"strength\":198,\"defense\":150,\"dexterity\":200,\"agility\":202,\"charisma\":206,\"intelligence\":106,\"hacking_chance_mult\":1.2928217702399998,\"hacking_speed_mult\":1.2928217702399998,\"hacking_money_mult\":1.2928217702399998,\"hacking_grow_mult\":1.2928217702399998,\"hacking_exp\":843146.9699151855,\"strength_exp\":112530.36382798842,\"defense_exp\":29600.9262093618,\"dexterity_exp\":116101.67191218061,\"agility_exp\":124886.39584083673,\"charisma_exp\":33289.08692224416,\"intelligence_exp\":13802.00055146201,\"hacking_mult\":1.2928217702399998,\"strength_mult\":1.1543051519999998,\"defense_mult\":1.1543051519999998,\"dexterity_mult\":1.1543051519999998,\"agility_mult\":1.1543051519999998,\"charisma_mult\":1.5458454595583997,\"hacking_exp_mult\":1.2928217702399998,\"strength_exp_mult\":1.1543051519999998,\"defense_exp_mult\":1.1543051519999998,\"dexterity_exp_mult\":1.1543051519999998,\"agility_exp_mult\":1.1543051519999998,\"charisma_exp_mult\":1.1543051519999998,\"company_rep_mult\":1.1543051519999998,\"faction_rep_mult\":1.1543051519999998,\"money\":710398438.3306046,\"city\":\"Sector-12\",\"location\":\"Joe's Guns\",\"jobs\":{\"Joe's Guns\":\"Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"CSEC\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":640,\"hashes\":1.9195150107639893,\"upgrades\":{\"Sell for Money\":333,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Tian Di Hui\",\"Sector-12\",\"Bladeburners\",\"Church of the Machine God\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Stanek's Gift - Genesis\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":2,\"n\":5},{\"lvl\":1,\"n\":13},{\"lvl\":1,\"n\":4},{\"lvl\":1,\"n\":3},{\"lvl\":1,\"n\":9},{\"lvl\":1,\"n\":2}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.4313383884799997,\"crime_success_mult\":1.4313383884799997,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.2466495641599997,\"hacknet_node_money_mult\":1.2466495641599997,\"hacknet_node_purchase_cost_mult\":0.7271834486400001,\"hacknet_node_ram_cost_mult\":0.7271834486400001,\"hacknet_node_core_cost_mult\":0.7271834486400001,\"hacknet_node_level_cost_mult\":0.7271834486400001,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":115,\"moneyLost\":278500000,\"rank\":1955.7211216828487,\"maxRank\":1955.7211216828487,\"skillPoints\":45,\"totalSkillPoints\":651,\"teamSize\":0,\"teamLost\":0,\"hpLost\":3233,\"storedCycles\":2,\"randomEventCounter\":240,\"actionTimeToComplete\":60,\"actionTimeCurrent\":15,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Hyperbolic Regeneration Chamber\",\"type\":9}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":3196624671,\"popEst\":1166502663.5572135,\"comms\":87,\"chaos\":10.227064875888756}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":1116193003,\"popEst\":793241268.8470539,\"comms\":79,\"chaos\":0}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":1457322288,\"popEst\":680745609.7783306,\"comms\":152,\"chaos\":55.01016504947442}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":456076980,\"popEst\":739191713.952493,\"comms\":137,\"chaos\":8.001838169055592}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1404406714,\"popEst\":1051474219.477324,\"comms\":116,\"chaos\":0}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":3287494007,\"popEst\":1250015797.590522,\"comms\":94,\"chaos\":4.91294525466421}}},\"city\":\"Sector-12\",\"skills\":{\"Reaper\":7,\"Blade's Intuition\":16,\"Overclock\":3,\"Tracer\":5,\"Digital Observer\":1,\"Short-Circuit\":1,\"Cloak\":1,\"Datamancer\":1,\"Cyber's Edge\":6,\"Hands of Midas\":10,\"Hyperdrive\":2,\"Evasive System\":4},\"skillMultipliers\":{\"successChanceAll\":1.48,\"successChanceStealth\":1.055,\"successChanceKill\":1.055,\"successChanceContract\":1.2,\"successChanceOperation\":1.04,\"successChanceEstimate\":1.05,\"actionTime\":0.97,\"effHack\":1,\"effStr\":1.1400000000000001,\"effDef\":1.1400000000000001,\"effDex\":1.3224,\"effAgi\":1.3224,\"effCha\":1,\"effInt\":1,\"stamina\":1.12,\"money\":2,\"expGain\":1.2},\"staminaBonus\":0.04,\"maxStamina\":97.90123516083703,\"stamina\":57.38735174780322,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":53,\"maxLevel\":53,\"autoLevel\":true,\"baseDifficulty\":115.761827050905,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":1500,\"failures\":1079,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":15.24208333333413,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":228.54959054583927,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":0,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":1496.11999999993,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":210.50114787212178,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":1472.69791666659,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":427.9710395826452,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":0,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":890.0562500001936,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":484.71074771423133,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":0,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":951.4002083335683,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":641.9770758926734,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":783.0985416669622,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":856.5429025612698,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":816.6420833337007,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":958.1310934917411,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":476.3668750006389,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1472.6770083062565,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":489.08125000065075,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":true,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Tracking\",\"type\":2}},\"automateThreshHigh\":97,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Hyperbolic Regeneration Chamber\",\"type\":9}},\"automateThreshLow\":49,\"consoleHistory\":[\"help\",\"automate stamina 58.6 high\",\"automate stamina 30 low\",\"automate Contracts 'Tracking' high\",\"automate contracts 'Tracking' high\",\"automate general 'Hyperbolic Regeneration Chamber' low\",\"automate on\",\"automate help\",\"help\",\"automate start\",\"start automate\",\"help start\",\"help\",\"start\",\"help automate\",\"automate en\",\"automate stamina 64 high\",\"automate stamina 32 low\",\"automate en\",\"automate stamina 71 high\",\"automate stamina 36 low\",\"automate stamina 97 high\",\"automate stamina 49\",\"automate stamina 47 low\",\"automate stamina 49 low\"],\"consoleLogs\":[\"[3/21 01:35:13] Tracking contract successfully completed! Gained 2.392 rank and $3.881m\",\"[3/21 01:35:18] Tracking contract failed! Took 3 damage.\",\"[3/21 01:35:23] Tracking contract successfully completed! Gained 2.475 rank and $3.881m\",\"[3/21 01:35:28] Tracking contract failed! Took 3 damage.\",\"[3/21 01:35:33] Tracking contract failed! Took 3 damage.\",\"[3/21 01:35:38] Tracking contract failed! Took 3 damage.\",\"[3/21 01:35:43] Tracking contract successfully completed! Gained 2.452 rank and $3.881m\",\"[3/21 01:35:48] Tracking contract failed! Took 3 damage.\",\"[3/21 01:35:53] Tracking contract successfully completed! Gained 2.119 rank and $3.881m\",\"[3/21 01:35:58] Tracking contract successfully completed! Gained 2.505 rank and $3.881m\",\"[3/21 01:36:03] Tracking contract successfully completed! Gained 2.385 rank and $3.881m\",\"[3/21 01:36:04] Intelligence indicates that a large number of Synthoids migrated from Chongqing to some other city\",\"[3/21 01:36:08] Tracking contract failed! Took 3 damage.\",\"[3/21 01:36:13] Tracking contract successfully completed! Gained 2.199 rank and $3.881m\",\"[3/21 01:36:18] Tracking contract failed! Took 3 damage.\",\"[3/21 01:36:23] Tracking contract failed! Took 3 damage.\",\"[3/21 01:36:28] Tracking contract failed! Took 3 damage.\",\"[3/21 01:36:33] Tracking contract failed! Took 3 damage.\",\"[3/21 01:36:38] Tracking contract successfully completed! Gained 2.420 rank and $3.881m\",\"[3/21 01:36:50] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:37:02] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:37:14] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:37:26] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:37:37] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[3/21 01:37:38] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:37:50] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:38:02] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:38:14] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:38:26] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:38:38] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:38:50] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:39:02] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:39:14] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:39:26] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:39:38] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:39:50] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:40:02] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:40:14] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 01:40:19] Tracking contract successfully completed! Gained 2.316 rank and $3.881m\",\"[3/21 01:40:24] Tracking contract failed! Took 3 damage.\",\"[3/21 01:40:29] Tracking contract failed! Took 3 damage.\",\"[3/21 01:40:53] Tracking contract failed! Took 3 damage.\",\"[3/21 01:41:18] Tracking contract failed! Took 3 damage.\",\"[3/21 01:41:43] Tracking contract failed! Took 3 damage.\",\"[3/21 01:42:01] Intelligence indicates that the Synthoid population of Chongqing just changed significantly\",\"[3/21 01:42:08] Tracking contract successfully completed! Gained 2.113 rank and $3.881m\",\"[3/21 01:42:33] Tracking contract failed! Took 3 damage.\",\"[3/21 01:42:58] Tracking contract failed! Took 3 damage.\",\"[3/21 01:43:23] Tracking contract failed! Took 3 damage.\",\"[3/21 01:43:48] Tracking contract failed! Took 3 damage.\",\"[3/21 01:44:13] Tracking contract successfully completed! Gained 2.450 rank and $3.881m\",\"[3/21 01:44:38] Tracking contract successfully completed! Gained 2.166 rank and $3.881m\",\"[3/21 01:45:03] Tracking contract successfully completed! Gained 2.502 rank and $3.881m\",\"[3/21 01:45:28] Tracking contract failed! Took 3 damage.\",\"[3/21 01:45:53] Tracking contract successfully completed! Gained 2.534 rank and $4.040m\",\"[3/21 01:46:18] Tracking contract failed! Took 3 damage.\",\"[3/21 01:46:43] Tracking contract failed! Took 3 damage.\",\"[3/21 01:47:08] Tracking contract successfully completed! Gained 2.403 rank and $4.040m\",\"[3/21 01:47:15] Intelligence indicates that a new Synthoid community was formed in a city\",\"[3/21 01:47:33] Tracking contract failed! Took 3 damage.\",\"[3/21 01:47:58] Tracking contract successfully completed! Gained 2.522 rank and $4.040m\",\"[3/21 01:48:23] Tracking contract successfully completed! Gained 2.554 rank and $4.040m\",\"[3/21 01:48:48] Tracking contract successfully completed! Gained 2.242 rank and $4.040m\",\"[3/21 01:49:13] Tracking contract successfully completed! Gained 2.665 rank and $4.040m\",\"[3/21 01:49:38] Tracking contract successfully completed! Gained 2.366 rank and $4.040m\",\"[3/21 01:50:03] Tracking contract successfully completed! Gained 2.371 rank and $4.040m\",\"[3/21 01:50:28] Tracking contract successfully completed! Gained 2.443 rank and $4.040m\",\"[3/21 01:50:53] Tracking contract successfully completed! Gained 2.604 rank and $4.040m\",\"[3/21 01:51:18] Tracking contract failed! Took 3 damage.\",\"[3/21 01:51:43] Tracking contract failed! Took 3 damage.\",\"[3/21 01:52:08] Tracking contract successfully completed! Gained 2.402 rank and $4.040m\",\"[3/21 01:52:33] Tracking contract failed! Took 3 damage.\",\"[3/21 01:52:58] Tracking contract failed! Took 3 damage.\",\"[3/21 01:53:23] Tracking contract failed! Took 3 damage.\",\"[3/21 01:53:48] Tracking contract failed! Took 3 damage.\",\"[3/21 01:54:13] Tracking contract failed! Took 3 damage.\",\"[3/21 01:54:38] Tracking contract failed! Took 3 damage.\",\"[3/21 01:55:03] Tracking contract successfully completed! Gained 2.558 rank and $4.040m\",\"[3/21 01:55:28] Tracking contract failed! Took 3 damage.\",\"[3/21 01:55:53] Tracking contract successfully completed! Gained 2.195 rank and $4.040m\",\"[3/21 01:56:18] Tracking contract failed! Took 3 damage.\",\"[3/21 01:56:43] Tracking contract failed! Took 3 damage.\",\"[3/21 01:57:08] Tracking contract successfully completed! Gained 2.216 rank and $4.040m\",\"[3/21 01:57:33] Tracking contract failed! Took 3 damage.\",\"[3/21 01:57:58] Tracking contract successfully completed! Gained 2.349 rank and $4.040m\",\"[3/21 01:58:23] Tracking contract failed! Took 3 damage.\",\"[3/21 01:58:48] Tracking contract failed! Took 3 damage.\",\"[3/21 01:59:13] Tracking contract failed! Took 4 damage.\",\"[3/21 01:59:38] Tracking contract failed! Took 3 damage.\",\"[3/21 02:00:03] Tracking contract successfully completed! Gained 2.182 rank and $4.040m\",\"[3/21 02:00:28] Tracking contract failed! Took 3 damage.\",\"[3/21 02:00:53] Tracking contract failed! Took 4 damage.\",\"[3/21 02:01:18] Tracking contract failed! Took 3 damage.\",\"[3/21 02:01:43] Tracking contract successfully completed! Gained 2.436 rank and $4.040m\",\"[3/21 02:02:08] Tracking contract successfully completed! Gained 2.411 rank and $4.040m\",\"[3/21 02:02:24] Tensions between Synthoids and humans lead to riots in Aevum! Chaos increased\",\"[3/21 02:02:33] Tracking contract failed! Took 3 damage.\",\"[3/21 02:03:33] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 02:04:33] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\",\"[3/21 02:05:33] Rested in Hyperbolic Regeneration Chamber. Restored 2 HP and gained 1.0 stamina\"]}},\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":6,\"lastUpdate\":1647853548729,\"lastSave\":1647853545188,\"totalPlaytime\":8158878600,\"playtimeSinceLastAug\":245901800,\"playtimeSinceLastBitnode\":245901800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":1745784147.335612,\"casino\":0,\"class\":-45177600,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":476272899,\"hacknet\":333000000,\"hacknet_expenses\":-1067549598.2647,\"hospitalization\":-278500000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":710397438.3306046,\"work\":3496237.983296353,\"servers\":-142628647.72364506,\"other\":-314300000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":1745784147.335612,\"casino\":0,\"class\":-45177600,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":476272899,\"hacknet\":333000000,\"hacknet_expenses\":-1067549598.2647,\"hospitalization\":-278500000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":710397438.3306046,\"work\":3496237.983296353,\"servers\":-142628647.72364506,\"other\":-314300000,\"augmentations\":0}},\"scriptProdSinceLastAug\":476272899,\"exploits\":[\"UndocumentedFunctionCall\",\"N00dles\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641836455036},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641836455047},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641836455048},{\"ID\":\"SF1.1\",\"unlockedOn\":1641836455050},{\"ID\":\"SF5.1\",\"unlockedOn\":1641836455052},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641836455054},{\"ID\":\"NS2\",\"unlockedOn\":1641836455056},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641836455058},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641836455061},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641836455066},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641836455068},{\"ID\":\"TOR\",\"unlockedOn\":1641836455070},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1641836455072},{\"ID\":\"N00DLES\",\"unlockedOn\":1641836455074},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641985181605},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642005180064},{\"ID\":\"DONATION\",\"unlockedOn\":1642059363053},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642281459886},{\"ID\":\"NITESEC\",\"unlockedOn\":1642294539865},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642295379868},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642327552076},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642414410971},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642431878957},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642496024763},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642604036956},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1643051466468},{\"ID\":\"SF4.1\",\"unlockedOn\":1643787782564},{\"ID\":\"CORPORATION\",\"unlockedOn\":1644142914908},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1644543832147},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1644544732148},{\"ID\":\"4S\",\"unlockedOn\":1644548392144},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1644551212144},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1644569965523},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1644572602342},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1644573560555},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644574220550},{\"ID\":\"SF3.1\",\"unlockedOn\":1644608381080},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1644633981312},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1644687937536},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1644718492351},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1645213120892},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1645213120900},{\"ID\":\"SF9.1\",\"unlockedOn\":1645251685383},{\"ID\":\"GANG\",\"unlockedOn\":1646006132081},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1646170693675},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1646287060872},{\"ID\":\"SF2.1\",\"unlockedOn\":1647607691135},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1647689021751},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1647689621731}],\"terminalCommandHistory\":[\"connect darkweb\",\"buy -l\",\"buy DeepscanV2.exe\",\"home\",\"scan-analyze 10\",\"connect darkweb\",\"buy AutoLink.exe\",\"hoe\",\"home\",\"scan-analyze 10\",\"home\",\"connect darkweb\",\"buy -a\",\"run BruteSSH.exe\",\"run FTPCrack.exe\",\"run HTTPWorm.exe\",\"run SQLInject.exe\",\"ls\",\"run relaySMTP.exe\",\"backdoor\",\"run NUKE.exe\",\"backdoor\",\"run bl173.js\",\"connect darkweb\",\"buy -l\",\"buy BruteSSH.exe\",\"buy FTPCrack.exe\",\"buy relaySMTP.exe\",\"buy AutoLink.exe\",\"buy DeepscanV1.exe\",\"home\",\"run bl173.js\",\"run stanek.js\",\"run hacknet.js\",\"ps\",\"killall\",\"run hacknet.js\",\"run bl173.js\",\"connect darkweb\",\"buy -l\",\"buy HTTPWorm.exe\",\"buy SQLInject.exe\",\"buy DeepscanV2.exe\",\"home\",\"scan-analyze 10\",\"run BruteSSH.exe\",\"run HTTPWorm.exe\",\"run SQLInject.exe\",\"run NUKE.exe\",\"backdoor\"],\"identifier\":\"17311cf4501ad\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"57.7.7.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":245.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hacknet.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":80448.20999968254,\"pid\":17,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:https://danielyxie.github.io/c55fcc26-e21d-452b-9ef5-6196b701cc0a\",\"moduleSequenceNumber\":210134}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[157424946,117796,117992,8722]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":272643.0215231854,\"onlineMoneyMade\":157424946,\"onlineRunningTime\":80424.60999968245,\"pid\":19,\"ramUsage\":2.45,\"server\":\"home\",\"threads\":98,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/cc3c729f-58cc-4e2d-a95e-1b9261eae29e\",\"moduleSequenceNumber\":49504}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"sigma-cosmetics\\\";\\r\\n\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\r\\n        grow(target);\\r\\n    } else {\\r\\n\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"/scrips/n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":49356,\"_hash\":\"f47aaf0875eadf2b94235e7c70ac4c6598b594edc997ce326f15356015ce8ed4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var serv = args[0];\\r\\nwhile (getServerMoneyAvailable(serv) >= 500000) {\\r\\n\\thack(serv);\\r\\n}\",\"filename\":\"foodnstuff.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":49357,\"_hash\":\"0e2e74e494d016d9a0d45ded9b1246280cd0f2afe9f2aa851d545786a04294e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Copies current hack script to all private servers.\\r\\n//8190\\r\\n\\r\\nvar i = 0;\\r\\n\\r\\n\\r\\nwhile (i <= 24) {\\r\\n\\r\\n        var hostname = (\\\"magi-\\\" + i);\\r\\n        var maxram = getServerMaxRam(hostname);\\r\\n        scriptKill(\\\"1337.script\\\", hostname);\\r\\n        rm(\\\"1337.script\\\", hostname);\\r\\n        tprint(\\\"Removing old script from: \\\" + hostname);\\r\\n        scp(\\\"1337.script\\\", hostname);\\r\\n        tprint(\\\"Copying new script to: \\\" + hostname);\\r\\n        exec(\\\"1337.script\\\", hostname, maxram/2.45);\\r\\n        tprint(\\\"Initializing new script on: \\\" + hostname);\\r\\n        ++i;\\r\\n    \\r\\n}\",\"filename\":\"/scrips/scpserv.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.55,\"server\":\"home\",\"moduleSequenceNumber\":49358,\"_hash\":\"7db93b1b3a6efb835bb295565c5a61314a10ea8fcb492a398440861cb198ce8c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var s = \\\"megacorp\\\"\\r\\n\\r\\n\\r\\nwhile(1){\\r\\ntprint(s + \\\" money available: $\\\" + getServerMoneyAvailable(s) + \\\" / $\\\" + getServerMaxMoney(s));\\r\\ntprint(s + \\\" security level: #\\\" + getServerSecurityLevel(s) + \\\" / #100\\\");\\r\\nsleep(1000)\\r\\n}\",\"filename\":\"/scrips/money.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":49359,\"_hash\":\"b6dce25ebc6f9bb90103c237bddad4282067d115bff69df74823615a624b3f00\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Needs to check if files are already present on server. Ideally i would like the worms to create a list of all servers,\\n//their tunnels, and stats such as money, security, files, running scripts. Endgame, code a new screen for the game\\n//to display all the stats from the map.js. \\n\\n\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail(\\\"map.js\\\");\\n\\tvar currenthost = ns.getHostname();\\n\\tns.tprint(currenthost);\\n\\tns.tprint(ns.scan(currenthost));\\n\\tvar home = \\\"home\\\";\\n\\n\\n\\t//\\tawait ns.scp('donthack.txt', \\\"home\\\", currenthost);\\n\\tvar scanned = ns.scan(currenthost); //loads stack array of servers from scan function\\n\\n\\tfor (var t = 0; t < scanned.length; ++t) {\\n\\t\\tvar scannedserv = scanned[t].split(',');\\n\\t\\tawait ns.write(\\\"scanned.txt\\\", scannedserv + \\\",\\\\n\\\\r\\\", \\\"w\\\");\\n\\t}\\n\\n\\tvar scanlist = ns.read(\\\"scanned.txt\\\").split(',\\\\n\\\\r');\\n\\tfor (var i = 0; i < scanlist.length; ++i) {\\n\\t\\tvar nextserver = scanlist[i].split(',\\\\n\\\\r'); //pop top of stack from scanned to the variable nextserver\\n\\t\\tns.tprint(\\\"Scanned:   \\\" + nextserver); //prints server popped from stack to terminal\\n\\t}\\n\\n\\n\\n\\n\\tvar donthack = ns.read('donthack.txt').split(',\\\\r'); //stack array from txt for already hacked servers\\n\\n\\tfor (var z = 0; z < donthack.length; ++z) {\\n\\t\\tvar nohackserv = donthack[z].split(',\\\\r');\\n\\t\\tns.tprint(\\\"Don't hack: \\\" + nohackserv);\\n\\n\\n\\t\\tif (!nohackserv == scannedserv) {\\n\\t\\t\\tns.tprint(\\\"Current server not found in DONT HACK list. Worm commencing...\\\");\\n\\n\\t\\t\\tns.tprint(\\\"Nextserver: \\\" + scannedserv);\\n\\n\\t\\t\\tawait ns.scp(\\\"donthack.txt\\\", home, scannedserv);\\n\\t\\t\\tif (ns.fileExists(\\\"donthack.txt\\\", scannedserv)) {\\n\\t\\t\\t\\tns.tprint(\\\"Copied donthack.txt to next server.\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.scp(\\\"wormhack.script\\\", home, scannedserv); //copies wormhack script to target server\\n\\t\\t\\tif (ns.fileExists(\\\"wormhack.script\\\", scannedserv)) {\\n\\t\\t\\t\\tns.tprint(\\\"Copied wormhack.script to next server.\\\");\\n\\t\\t\\t}\\n\\t\\t\\t//\\t\\t\\tns.exec(\\\"map.js\\\", nextserver, 1); //executes new version of self on target server\\n\\t\\t\\t//\\t\\t\\tns.exec(\\\"wormhack.script\\\", nextserver, 1); //executes wormhack script on target server\\n\\t\\t}else(ns.tprint(scannedserv + \\\" is in the dont hack list!!\\\"))\\n\\n\\n\\n\\n\\t}\\n\\n}\",\"filename\":\"map.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"map.js\",\"url\":\"blob:file:///e8f5dc2e-199d-4b99-ab67-e2741c3d0690\"}],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":49360,\"_hash\":\"6f58c59516a78656d6e8d51dbd84a1d826b699667eb4355f462a17d4fdeaa984\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllServers } from \\\"getServers.js\\\";\\n\\nexport function main(ns) {\\n    const contracts = getAllServers(ns, \\\"home\\\").flatMap((server) => {\\n        const onServer = ns.ls(server, \\\".cct\\\").map((contract) => {\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = solve(type, data, server, contract, ns);\\n            return `${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`;\\n        });\\n        return onServer;\\n    });\\n    ns.tprint(`Found ${contracts.length} contracts`);\\n    contracts.forEach((contract) => void ns.tprint(contract));\\n}\\n\\nfunction solve(type, data, server, contract, ns) {\\n    let solution = \\\"\\\";\\n    ns.tprint(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n    }\\n    return (solution != \\\"\\\") ? ns.codingcontract.attempt(solution, contract, server, [true]) : \\\"\\\";\\n}\\n\\n//ALGORITHMIC STOCK TRADER\\n\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n\\n    // WHY?\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n\\n    let highestProfit = JSON.parse(tempArr);\\n\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                } else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                } else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n//SMALLEST TRIANGLE SUM\\n\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n   \\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            } else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            } else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n\\n        }\\n\\n        previousArray = nextArray;\\n    }\\n\\n    return Math.min.apply(null, nextArray);\\n}\\n\\n//UNIQUE PATHS IN A GRID\\n\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\n\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\n\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\n\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n\\n    }\\n\\n    return totalPossiblePaths;\\n}\\n\\n//GENERATE IP ADDRESSES\\n\\nfunction generateIps(num) {\\n    num = num.toString();\\n\\n    const length = num.length;\\n\\n    const ips = [];\\n\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n\\n                if (isValid) ips.push(ip.join(\\\".\\\"));\\n\\n            }\\n\\n        }\\n    }\\n\\n    return ips;\\n\\n}\\n\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\") return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255) return false;\\n    return true;\\n}\\n\\n//GREATEST FACTOR\\n\\nfunction factor(num) {\\n    for (let div = 2; div <= Math.sqrt(num); div++) {\\n        if (num % div != 0) {\\n            continue;\\n        }\\n        num = num / div;\\n        div = 2;\\n    }\\n    return num;\\n}\\n\\n//SPIRALIZE Matrix\\n\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\n\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n\\n// Merge Overlapping Intervals\\n\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\",\"filename\":\"/scrips/autosolver.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":49361,\"_hash\":\"ad5763bc0eaf6148a89c08a48b83455003708daacb826d8aac19579db99009d6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//caca test script worm is supposed to distribute\\r\\n\\r\\ntprint(\\\"0 43y 1m jv$7 43r3 a7: \\\" + getHostname());\",\"filename\":\"/scrips/test.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.65,\"server\":\"home\",\"moduleSequenceNumber\":49362,\"_hash\":\"d6f496e78502f7981f8783ca6f330954097deb2ed75979884c657aa8c9bbfe02\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var serv = getHostname();\\r\\n\\r\\n    if(!fileExists(\\\"1337.script\\\")){\\r\\n        await scp(\\\"1337.script\\\", serv);\\r\\n    }\\r\\n\\r\\n    brutessh(serv);\\r\\n    ftpcrack(serv);\\r\\n    httpworm(serv);\\r\\n    relaysmtp(serv);\\r\\n    sqlinject(serv);\\r\\n    nuke(serv);\\t\\r\\n    //exec(\\\"1337.script\\\", serv, maxram/2.4);\",\"filename\":\"wormhack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":49363,\"_hash\":\"f63622e4403e11c6e7d43311a5cf3aa4e02c5d33d9bbf428b3f5c600d2c8b297\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//list of servers not to hack\",\"filename\":\"donthack.txt\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":49364,\"_hash\":\"1f9f9beac3afac0d8b826dbbe778d1203c802b08ebe327a9d580db31437f4ce1\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\n\\nvar today = new Date();\\nvar time = today.getHours() + \\\":\\\" + today.getMinutes() + \\\":\\\" + today.getSeconds();\\n\\nns.tprint(time);\\nns.tprint(ns.hackAnalyzeChance(\\\"fulcrumtech\\\"));\\nns.tprint(ns.hackAnalyzeChance(\\\"blade\\\"));\\nns.tprint(ns.hackAnalyzeChance(\\\"nova-med\\\"));\\nns.tprint(ns.hackAnalyzeChance(\\\"fulcrumassets\\\"));\\nns.tprint(ns.hackAnalyzeChance(\\\"clarkinc\\\")); //seems like 0.25 is the ratio for level cap/hack chance\\n}\",\"filename\":\"/scrips/time.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"time.js\",\"url\":\"blob:file:///df35a7c7-eace-43a4-9961-25ff0e728e63\"}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":49365,\"_hash\":\"8b274909a58fb4fa01be4dbb2ec22dd5708856b73ea74a460360db7462a314e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n    var tservs = ns.read(\\\"targs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n    for (var i = 5; i < tservs.length - 3; ++i) {\\n\\n        var target = tservs[i].split('\\\",');\\n        var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    \\n        while (ns.hasRootAccess(target)) {\\n            if (ns.getServerSecurityLevel(target) > securityThresh) {\\n                await ns.weaken(target);\\n            } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n                await ns.grow(target);\\n            } else {\\n                await ns.hack(target);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"/scrips/x4.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"x4.js\",\"url\":\"blob:file:///42824c1b-d202-4612-a53f-a4212f5eb381\"}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49366,\"_hash\":\"13a8f23e753269c9f91e88b2a3c3db7944a76cc7859684960611790eb2a631cd\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n    var tservs = ns.read(\\\"targs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n    for (var i = 4; i < tservs.length - 4; ++i) {\\n\\n        var target = tservs[i].split('\\\",');\\n        var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    \\n        while (ns.hasRootAccess(target)) {\\n            if (ns.getServerSecurityLevel(target) > securityThresh) {\\n                await ns.weaken(target);\\n            } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n                await ns.grow(target);\\n            } else {\\n                await ns.hack(target);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"/scrips/x3.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"x3.js\",\"url\":\"blob:file:///f66a0a5f-777e-457d-b174-1058de9f90c5\"}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49367,\"_hash\":\"692a2f745ac4d337be9b54457deb816d46fc1dfe194ea64e3e0e136180fca5e2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n    var tservs = ns.read(\\\"targs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n    for (var i = 3; i < tservs.length - 5; ++i) {\\n\\n        var target = tservs[i].split('\\\",');\\n        var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    \\n        while (ns.hasRootAccess(target)) {\\n            if (ns.getServerSecurityLevel(target) > securityThresh) {\\n                await ns.weaken(target);\\n            } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n                await ns.grow(target);\\n            } else {\\n                await ns.hack(target);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"/scrips/x2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"x2.js\",\"url\":\"blob:file:///2d6a1d28-1983-4fd7-b8f3-d49a17a991bb\"}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49368,\"_hash\":\"525786d99804326a2578c08765d4ad0044211a92112598f51e1ca987744ec2d3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n    var tservs = ns.read(\\\"targs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n    for (var i = 2; i < tservs.length - 6; ++i) {\\n\\n        var target = tservs[i].split('\\\",');\\n        var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    \\n        while (ns.hasRootAccess(target)) {\\n            if (ns.getServerSecurityLevel(target) > securityThresh) {\\n                await ns.weaken(target);\\n            } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n                await ns.grow(target);\\n            } else {\\n                await ns.hack(target);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"/scrips/x1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"x1.js\",\"url\":\"blob:file:///43ec7aad-c80e-434c-82cd-131dfdcf0505\"}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49369,\"_hash\":\"29236148a33184af9a2a0189cc613697129a3ea80a0927b607fb451dd71761ae\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = \\\"ecorp\\\"\\r\\nvar hackamt = 1000000000000;\\r\\nvar weaktime = ns.getWeakenTime(target);\\r\\nvar growtime = ns.getGrowTime(target);\\r\\nvar hacktime = ns.getHackTime(target);\\r\\nvar threads = ns.hackAnalyzeThreads(target, hackamt);\\r\\n\\r\\nns.tprint(\\\"Threads needed to hack 1t from : \\\" + target + \\\" \\\" + ns.nFormat(ns.hackAnalyzeThreads(target, hackamt), '0,0'));\\r\\nns.tprint(\\\"Time needed to weaken : \\\" + target + \\\" \\\" + ns.tFormat(ns.getWeakenTime(target), '0,0'));\\r\\nns.tprint(\\\"Time needed to grow : \\\" + target + \\\" \\\" + ns.tFormat(ns.getGrowTime(target), '0,0'));\\r\\nns.tprint(\\\"Time needed to hack : \\\" + target + \\\" \\\" + ns.tFormat(ns.getHackTime(target), '0,0'));\\r\\n\\r\\n\\r\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n\\twhile (ns.hasRootAccess(target)) {\\r\\n\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\",\"filename\":\"analyze.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":49370,\"_hash\":\"bfd586b9bc76e4784d31d91ad1aa447b959213cf8c188327c1428bab30996999\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n    var tservs = ns.read(\\\"targs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n    for (var i = 1; i < tservs.length - 7; ++i) {\\n\\n        var target = tservs[i].split('\\\",');\\n        var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n        while (ns.hasRootAccess(target)) {\\n            if (ns.getServerSecurityLevel(target) > securityThresh) {\\n                await ns.weaken(target);\\n            } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n                await ns.grow(target);\\n            } else {\\n                await ns.hack(target);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"/scrips/x0.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"x0.js\",\"url\":\"blob:file:///728ff0b0-adf2-4ab2-b587-cdd12d428bdf\"}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49371,\"_hash\":\"dade4046b10601e136816d4d418de93829d9f3dbbd4b276b2ea4428a811c479e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n    var tservs = ns.read(\\\"targs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n    for (var i = 6; i < tservs.length - 2; ++i) {\\n\\n        var target = tservs[i].split('\\\",');\\n        var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    \\n        while (ns.hasRootAccess(target)) {\\n            if (ns.getServerSecurityLevel(target) > securityThresh) {\\n                await ns.weaken(target);\\n            } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n                await ns.grow(target);\\n            } else {\\n                await ns.hack(target);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"/scrips/x5.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"x5.js\",\"url\":\"blob:file:///d1fdedc2-57ff-482a-abc8-f0cd08c719b0\"}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49372,\"_hash\":\"29eee71004953fc44420f120b3da763ede72f63507c84bb9647ccf05fa837f6f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n    var tservs = ns.read(\\\"targs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n    for (var i = 7; i < tservs.length - 1; ++i) {\\n\\n        var target = tservs[i].split('\\\",');\\n        var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n        var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n    \\n        while (ns.hasRootAccess(target)) {\\n            if (ns.getServerSecurityLevel(target) > securityThresh) {\\n                await ns.weaken(target);\\n            } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n                await ns.grow(target);\\n            } else {\\n                await ns.hack(target);\\n            }\\n        }\\n    }\\n}\",\"filename\":\"/scrips/x6.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"x6.js\",\"url\":\"blob:file:///e1469dc8-3e2c-4b51-a859-5892f7ef3e31\"}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49373,\"_hash\":\"d340fecc0ff9bfe034e80e7013f25045b1ebf1664ae6bcf47ad2df9b09b689ab\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\n}\",\"filename\":\"/scrips/1.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":49374,\"_hash\":\"c75b90ac5105784597f35a663f3e63bdc33b2d862fd488d6c4ad106f610beb88\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"brutessh(\\\"w0r1d_d43m0n\\\");\\r\\nrelaysmtp(\\\"w0r1d_d43m0n\\\");\\r\\nftpcrack(\\\"w0r1d_d43m0n\\\");\\r\\nsqlinject(\\\"w0r1d_d43m0n\\\");\\r\\nhttpworm(\\\"w0r1d_d43m0n\\\");\\r\\nnuke(\\\"w0r1d_d43m0n\\\");\\r\\ninstallBackdoor(\\\"w0r1d_d43m0n\\\");\",\"filename\":\"/scrips/bitkill.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.9,\"server\":\"home\",\"moduleSequenceNumber\":49375,\"_hash\":\"c561774746f9c53b5ddaf63fc9c9ffe5e140f7433d3f2f1608acf3a3dea65404\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nns.exploits.unclickable();\\n\\nns.tprint(ns.heart.break());\\n\\nfor(var i=0; i < 999; ++i){\\nns.exploits.alterReality(1);\\nawait ns.sleep(500);\\n}\\n\\n\\n\\n\\n}\",\"filename\":\"exploits.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///44f4e044-6542-4769-bf0e-da074705949d\"}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":49376,\"_hash\":\"287791e9748088b810d5e97afa62510be728e54aa75f6f7c44733acb6f063b78\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n      ns.tail(\\\"player.js\\\");\\n      var playerstats = ns.getPlayer();\\n\\n      for (var i = 0; i < playerstats.length; ++i) {\\n\\n            var stat = playerstats[i].split(',\\\"');\\n            ns.tprint(stat);\\n            ns.tprint(i);\\n\\n      }\\n\\n\\n\\n}\",\"filename\":\"/scrips/player.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scrips/player.js\",\"url\":\"blob:https://danielyxie.github.io/82c7e620-4491-4bd2-8c37-3d530a0ab093\",\"moduleSequenceNumber\":361979}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":49377,\"_hash\":\"eadb8e36fd94be160b3de60967d2771515f859b5f70a84119c25acd2ca328388\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\nns.exec(\\\"1337.js\\\", \\\"home\\\", 500, \\\"home\\\", \\\"darkweb\\\", \\\"magi-0\\\");\\nns.tprint(ns.peek(1));\\n//ns.tprint(arguments[0,1,2]);\\nawait ns.writePort(1, \\\"home\\\");\\nns.tprint(ns.peek(1));\\n}\",\"filename\":\"arg.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"arg.js\",\"url\":\"blob:file:///fe8c7a9c-f433-405c-a368-143d51bf5fb4\"}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":49378,\"_hash\":\"3703deb5f0a7087f32c00fcd6c5247bcd09573c61db28287c7c9d5feb24c5308\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tvar servs = ns.read(\\\"servs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var i = 1; i < servs.length-1; ++i) {\\n\\n\\t\\tvar serv1 = servs[i].split('\\\",');\\n\\n\\t\\tns.tprint(\\\"Copying script to \\\" + serv1);\\n\\t\\tawait ns.scp(\\\"1337.script\\\", serv1);\\n\\n\\t}\\n\\n}\",\"filename\":\"readtest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"readtest.js\",\"url\":\"blob:file:///509c0543-7aef-4eda-a5ff-e673cf533847\"}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":49379,\"_hash\":\"b7eddb95b558d02bfb3d023443b229725a635e5d213bc16c22580e18efaa3777\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n\\tns.tail(\\\"bl173.js\\\"); //monitor script progress\\n\\t// This script targets any server in targetlist for hacking. It will crack those in the target list, then set up all\\n\\t//available servers in the servs list to hack those servers. x.js should be your hack/grow/weaken scripts.\\n\\n\\t// Script divider variable. Integer value should equal the number of targets in the targetlist. This is to dedicate equal portions of ram to each script running.\\n\\tvar div = 1;\\n\\tvar hacklvl = ns.getHackingLevel(); //current Hack level so script does not target/use servers you cannot gain root on.\\n\\t//memory dividers need to be adjusted so the script divides into the available ram evenly. General rule is available \\n\\t//ram/script cost, but it does not always divide evenly.\\n\\tvar hackscript = \\\"x.js\\\";\\n\\tvar pmemdiv = ns.getScriptRam(hackscript); //private server ram divider\\n\\tvar hmemdiv = ns.getScriptRam(hackscript); //home computer ram divider\\n\\tvar memdiv = ns.getScriptRam(hackscript); //public server ram divider\\n\\tvar tfile = \\\"targs.txt\\\";\\n\\tvar sfile = \\\"servs.txt\\\";\\n\\n\\n\\n\\t///////////////////////////////////////////////////////////////////////////////\\n\\t//setup home\\n\\n\\tvar hserv = \\\"home\\\";\\n\\tns.scriptKill(hackscript, hserv);\\n\\tvar maxram = ns.getServerMaxRam(hserv);\\n\\tvar usedram = ns.getServerUsedRam(hserv);\\n\\tvar availram = maxram - usedram;\\n\\tvar threads = (availram / div) / hmemdiv;\\n\\n\\n\\n\\tvar tservs = ns.read(tfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var i = 1; i < tservs.length - 1; ++i) {\\n\\t\\tvar t1 = tservs[i].split('\\\",');\\n\\t\\tvar target = t1.toString();\\n\\t\\tns.tprint(\\\"Target \\\" + target + \\\" Max Money: $\\\" + ns.nFormat(ns.getServerMaxMoney(target), '0,0'));\\n\\t\\tns.exec(hackscript, hserv, threads, target);\\n\\n\\t}\\n\\n\\n\\n\\t//count how many exes we have\\n\\tvar execount = 0;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\n\\tns.tprint(\\\"You have \\\" + execount + \\\" port openers.\\\"); //How many exe's do I have?\\n\\n\\t//crack target servers\\n\\tvar tservs = ns.read(tfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var i = 1; i < tservs.length - 1; ++i) {\\n\\t\\tvar target = tservs[i].split('\\\",');\\n//\\t\\tns.tprint(\\\"Target: \\\" + target);\\n\\n\\t\\tif (!ns.hasRootAccess(target) && ns.getServerRequiredHackingLevel(target) <= hacklvl) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\t\\tns.brutessh(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\t\\tns.httpworm(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.getServerNumPortsRequired(target) <= execount) {\\n\\t\\t\\t\\tns.nuke(target);\\n\\t\\t\\t} else (ns.tprint(\\\"Cannot NUKE \\\" + target + \\\" : Cannot open the needed # of ports.\\\"))\\n\\t\\t}\\n\\t}\\n\\n\\n\\t//code to kill all running scripts on all public servers. steps through servs.txt.\\n\\n\\tvar servs = ns.read(sfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var e = 1; e < servs.length - 1; ++e) {\\n\\t\\tvar serv = servs[e].split('\\\",');\\n\\t\\tns.killall(serv);\\n\\t}\\n\\t//crack slave public servers\\n\\t////////////////////////////////////////////////////////////////////////////////////////////////\\n\\tvar servs = ns.read(sfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var j = 1; j < servs.length - 1; ++j) {\\n\\t\\tvar serv = servs[j].split('\\\",');\\n\\t\\tif (!ns.hasRootAccess(serv) && ns.getServerRequiredHackingLevel(serv) <= hacklvl) { //make sure you can hack this server if you haven't already\\n\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\t\\tns.brutessh(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"BruteSSH.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"FTPCrack.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\t\\tns.httpworm(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"HTTPWorm.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"relaySMTP.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\t\\tns.sqlinject(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"SQLInject.exe does not exist.\\\"));\\n\\n\\t\\t\\tif (ns.getServerNumPortsRequired(serv) <= execount) {\\n\\t\\t\\t\\tns.nuke(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"Cannot NUKE \\\" + target + \\\" : Cannot open the needed # of ports.\\\"))\\n\\t\\t}\\n\\t}\\n\\n\\t//copies and executes x scripts on servers in list\\n\\tvar servs = ns.read(sfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tvar tservs = ns.read(tfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var z = 1; z < servs.length - 1; ++z) {\\n\\n\\t\\tvar serv = servs[z].split('\\\",');\\n\\t\\tvar maxram = ns.getServerMaxRam(serv);\\n\\t\\tvar usedram = ns.getServerUsedRam(serv);\\n\\t\\tvar availram = maxram - usedram;\\n\\t\\tvar threads = (availram / div) / memdiv;\\n\\n\\n\\n\\t\\tawait ns.scp(sfile, serv);\\n\\t\\tawait ns.scp(tfile, serv);\\n\\n\\t\\tif (ns.hasRootAccess(serv) && ns.getServerMaxRam(serv) > 0) { //already root? install and run scripts if the server has more than 0gb of ram.\\n\\t\\t\\tfor (var o = 0; o < div; ++o) {\\n\\n\\t\\t\\t\\tfor (var i = 1; i < tservs.length - 1; ++i) {\\n\\t\\t\\t\\t\\tvar t1 = tservs[i].split('\\\",');\\n\\t\\t\\t\\t\\tvar target = t1.toString();\\n\\n\\t\\t\\t\\t\\tawait ns.scp(hackscript, serv);\\n\\t\\t\\t\\t\\tns.exec(hackscript, serv, threads, target);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t}\\n\\n\\n\\n\\t/////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\t////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\tvar pcount = 0; //counter for private servers purchased as the for loops go through.\\n\\tvar pservs = ns.getPurchasedServers();\\n\\tfor (var r = 0; r < pservs.length; ++r) {\\n\\t\\tpcount = r + 1;\\n\\t}\\n\\n\\tns.tprint(\\\"You have \\\" + pcount + \\\" private servers.\\\");\\n\\n\\n\\tif (pcount > 0) {\\n\\t\\t//code to kill all running scripts on all player servers. Assumes you have the max of 25 already.\\n\\t\\tvar pservs = ns.getPurchasedServers();\\n\\t\\tfor (var int = 0; int < pservs.length; ++int) {\\n\\t\\t\\tvar pserv = pservs[int];\\n\\t\\t\\tns.killall(pserv);\\n\\t\\t}\\n\\n\\t\\t//code to start copying hack scripts to private servers.\\n\\t\\t////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\t\\tvar pservs = ns.getPurchasedServers();\\n\\t\\tfor (var int = 0; int < pservs.length; ++int) {\\n\\n\\t\\t\\tvar pserv = pservs[int];\\n\\t\\t\\tvar maxram = ns.getServerMaxRam(pserv);\\n\\t\\t\\tvar usedram = ns.getServerUsedRam(pserv);\\n\\t\\t\\tvar availram = maxram - usedram;\\n\\t\\t\\tvar threads = (availram / div) / pmemdiv;\\n\\n\\t\\t\\tfor (var z = 0; z < div; ++z) {\\n\\n\\t\\t\\t\\tfor (var i = 1; i < tservs.length - 1; ++i) {\\n\\t\\t\\t\\t\\tvar t1 = tservs[i].split('\\\",');\\n\\t\\t\\t\\t\\tvar target = t1.toString();\\n\\n\\t\\t\\t\\t\\tawait ns.scp(hackscript, pserv);\\n\\t\\t\\t\\t\\tawait ns.scp(sfile, pserv);\\n\\t\\t\\t\\t\\tawait ns.scp(tfile, pserv);\\n\\t\\t\\t\\t\\tns.exec(hackscript, pserv, threads, target);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else (ns.tprint(\\\"NO PRIV SERVS PURCHASED\\\"))\\n\\n\\tns.toast(\\\"bl173 finished running!\\\");\\n\\n}\",\"filename\":\"bl173.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"bl173.js\",\"url\":\"blob:https://danielyxie.github.io/8082e004-f848-4775-b6b3-aee9da59c9ad\",\"moduleSequenceNumber\":343173}],\"dependents\":[],\"ramUsage\":8.25,\"server\":\"home\",\"moduleSequenceNumber\":343173,\"_hash\":\"353c6ba709af334b3f03ddd50e6be1840f9f0721e5fc68608d2b4a9e8ed2e7c4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    \\n\\tvar servs = ns.read(\\\"servs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var e = 1; e < servs.length - 1; ++e) {\\n\\t\\tvar serv = servs[e].split(',\\\"');\\n\\t\\tserv.fontcolor=(\\\"blue\\\");\\n\\t\\tns.tprint(\\\"Max money for \\\" + serv + \\\": $\\\" + ns.nFormat(ns.getServerMaxMoney(serv), '0,0') + \\\" LEVEL: \\\" + ns.getServerRequiredHackingLevel(serv));\\n\\t\\tns.tprint(\\\"Number of threads needed for 10000% Growth and 1 core: \\\" + ns.growthAnalyze(serv, 10000, 1));\\n\\t\\tns.tprint(\\\"Min Security Level: \\\" + ns.getServerMinSecurityLevel(serv));\\n\\t}\\n\\n}\",\"filename\":\"maxmoney.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"maxmoney.js\",\"url\":\"blob:https://danielyxie.github.io/014bdfa5-64df-45e9-beba-fc815d030168\",\"moduleSequenceNumber\":41032}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":49381,\"_hash\":\"b129f4d035d30df7a034de45c994cb502713006235e90a06251832868bf8500a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.tail(\\\"cracker.js\\\");\\n    var hacklvl = ns.getHackingLevel();\\n    var tservs = ns.read(\\\"targs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\n    for (var i = 1; i < tservs.length - 1; ++i) {\\n        var target = tservs[i].split('\\\",');\\n        ns.tprint(target);\\n\\n        if (!ns.hasRootAccess(target) && ns.getServerRequiredHackingLevel(target) < hacklvl) {\\n            if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n                ns.brutessh(target);\\n            }\\n            if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n                ns.ftpcrack(target);\\n            }\\n            if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n                ns.httpworm(target);\\n            }\\n            if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n                ns.relaysmtp(target);\\n            }\\n            if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n                ns.sqlinject(target);\\n            }\\n        }\\n\\n        if (!ns.hasRootAccess(target) && ns.getServerRequiredHackingLevel(target) < hacklvl) {\\n            ns.nuke(target);\\n        }\\n\\n    }\\n}\",\"filename\":\"cracker.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"cracker.js\",\"url\":\"blob:file:///62d25b9e-bfda-4151-9904-429c9c57f0b0\"}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":49382,\"_hash\":\"cdf781df695a56d973c6c06763f5d30578d24f5228d0559ba1ef236394ca4f1b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar pservs = ns.getPurchasedServers();\\n\\n\\tfor (var i = 0; i < pservs.length; ++i) {\\n\\n\\t\\tvar pserv = pservs[i].split('\\\",\\\"');\\n\\t\\tns.tprint(pserv);\\n\\t}\\n\\tns.tprint(\\\"You have \\\" + i + \\\" purchased servers.\\\");\\n}\",\"filename\":\"ctest.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ctest.js\",\"url\":\"blob:file:///268591f3-5845-470c-8205-3a529a4757e8\",\"moduleSequenceNumber\":224662}],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"moduleSequenceNumber\":49383,\"_hash\":\"ed6d990ef3639c4e1d6328d1a8219e656fd707099abd9927b107325fcd32d759\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tail(\\\"killall.script\\\");\\n\\nvar servs = ns.read(\\\"servs.txt\\\").split('\\\",\\\\r\\\\n\\\"');\\nfor (var e = 1; e < servs.length - 1; ++e) {\\n    var serv = servs[e].split('\\\",');\\n    ns.killall(serv);\\n}\\n\\n/////////////////////////////////////////////////////////////////////////////////////////////////////\\n////////////////////////////////////////////////////////////////////////////////////////////////////\\nvar pcount = 0; //counter for private servers purchased as the for loops go through.\\nvar pservs = ns.getPurchasedServers();\\nfor (var r = 0; r < pservs.length; ++r) {\\n    pcount = r + 1;\\n}\\n\\nns.tprint(\\\"You have \\\" + pcount + \\\" private servers.\\\");\\n\\n\\nif (pcount > 0) {\\n    //code to kill all running scripts on all player servers. Assumes you have the max of 25 already.\\n    var pservs = ns.getPurchasedServers();\\n    for (var int = 0; int < pservs.length; ++int) {\\n        var pserv = \\\"magi-\\\" + int;\\n        ns.killall(pserv);\\n    }\\n} else (ns.tprint(\\\"NO PRIV SERVS PURCHASED\\\"))\\n}\",\"filename\":\"killall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"killall.js\",\"url\":\"blob:https://danielyxie.github.io/94d25253-53d6-4229-b997-b0b18387369d\",\"moduleSequenceNumber\":1588}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":49384,\"_hash\":\"b2247834ddee53c76b15075d75c516ca11510fb3cd10c17c19c7b294e01a3082\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n\\nexport async function main(ns) {\\n\\n\\t// This script targets any server in targetlist for hacking. It will crack those in the target list, then set up all\\n\\t//available servers in the servs list to hack those servers. x0++.js should be your hack/grow/weaken scripts.\\n\\n\\t// Script divider variable. Integer value should equal the number of targets in the targetlist. This is to dedicate equal portions of ram to each script running.\\n\\tvar div = 1;\\n\\tvar hacklvl = ns.getHackingLevel(); //current Hack level so script does not target/use servers you cannot gain root on.\\n\\t//memory dividers need to be adjusted so the script divides into the available ram evenly. General rule is available \\n\\t//ram/script cost, but it does not always divide evenly.\\n\\tvar hackscript = \\\"x.js\\\";\\n\\tvar pmemdiv = ns.getScriptRam(hackscript); //private server ram divider\\n\\tvar hmemdiv = ns.getScriptRam(hackscript); //home computer ram divider\\n\\tvar memdiv = ns.getScriptRam(hackscript); //public server ram divider\\n\\tvar tfile = \\\"targs2.txt\\\";\\n\\tvar sfile = \\\"servs.txt\\\";\\n\\n\\n\\tns.tail(\\\"bl173.js\\\"); //monitor script progress\\n\\t///////////////////////////////////////////////////////////////////////////////\\n\\t//setup home\\n\\n\\tvar hserv = \\\"home\\\";\\n\\tns.scriptKill(hackscript, hserv);\\n\\tvar maxram = ns.getServerMaxRam(hserv);\\n\\tvar usedram = ns.getServerUsedRam(hserv);\\n\\tvar availram = maxram - usedram;\\n\\tvar threads = (availram / div) / hmemdiv;\\n\\n\\n\\n\\tvar tservs = ns.read(tfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var i = 1; i < tservs.length - 1; ++i) {\\n\\t\\tvar t1 = tservs[i].split('\\\",');\\n\\t\\tvar target = t1.toString();\\n\\t\\tns.exec(hackscript, hserv, threads, target);\\n\\n\\t}\\n\\n\\t//count how many exes we have\\n\\tvar execount = 0;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\n\\tns.tprint(\\\"You have \\\" + execount + \\\" port openers.\\\"); //How many exe's do I have?\\n\\n\\t//crack target servers\\n\\tvar tservs = ns.read(tfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var i = 1; i < tservs.length - 1; ++i) {\\n\\t\\tvar target = tservs[i].split('\\\",');\\n\\t\\tns.tprint(\\\"Target: \\\" + target);\\n\\n\\t\\tif (!ns.hasRootAccess(target) && ns.getServerRequiredHackingLevel(target) <= hacklvl) {\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\t\\tns.brutessh(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\t\\tns.httpworm(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.getServerNumPortsRequired(target) <= execount) {\\n\\t\\t\\t\\tns.nuke(target);\\n\\t\\t\\t} else (ns.tprint(\\\"Cannot NUKE \\\" + target + \\\" : Cannot open the needed # of ports.\\\"))\\n\\t\\t}\\n\\t}\\n\\n\\n\\t//code to kill all running scripts on all public servers. steps through servs.txt.\\n\\n\\tvar servs = ns.read(sfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var e = 1; e < servs.length - 1; ++e) {\\n\\t\\tvar serv = servs[e].split('\\\",');\\n\\t\\tns.killall(serv);\\n\\t}\\n\\t//crack slave public servers\\n\\t////////////////////////////////////////////////////////////////////////////////////////////////\\n\\tvar servs = ns.read(sfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var j = 1; j < servs.length - 1; ++j) {\\n\\t\\tvar serv = servs[j].split('\\\",');\\n\\t\\tif (!ns.hasRootAccess(serv) && ns.getServerRequiredHackingLevel(serv) <= hacklvl) { //make sure you can hack this server if you haven't already\\n\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\t\\tns.brutessh(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"BruteSSH.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"FTPCrack.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\t\\tns.httpworm(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"HTTPWorm.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"relaySMTP.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\t\\tns.sqlinject(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"SQLInject.exe does not exist.\\\"));\\n\\n\\t\\t\\tif (ns.getServerNumPortsRequired(serv) <= execount) {\\n\\t\\t\\t\\tns.nuke(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"Cannot NUKE \\\" + target + \\\" : Cannot open the needed # of ports.\\\"))\\n\\t\\t}\\n\\t}\\n\\n\\t//copies and executes x scripts on servers in list\\n\\tvar servs = ns.read(sfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tvar tservs = ns.read(tfile).split('\\\",\\\\r\\\\n\\\"');\\n\\tfor (var z = 1; z < servs.length - 1; ++z) {\\n\\n\\t\\tvar serv = servs[z].split('\\\",');\\n\\t\\tvar maxram = ns.getServerMaxRam(serv);\\n\\t\\tvar usedram = ns.getServerUsedRam(serv);\\n\\t\\tvar availram = maxram - usedram;\\n\\t\\tvar threads = (availram / div) / memdiv;\\n\\n\\n\\n\\t\\tawait ns.scp(sfile, serv);\\n\\t\\tawait ns.scp(tfile, serv);\\n\\n\\t\\tif (ns.hasRootAccess(serv) && ns.getServerMaxRam(serv) > 0) { //already root? install and run scripts if the server has more than 0gb of ram.\\n\\t\\t\\tfor (var o = 0; o < div; ++o) {\\n\\n\\t\\t\\t\\tfor (var i = 1; i < tservs.length - 1; ++i) {\\n\\t\\t\\t\\t\\tvar t1 = tservs[i].split('\\\",');\\n\\t\\t\\t\\t\\tvar target = t1.toString();\\n\\n\\t\\t\\t\\t\\tawait ns.scp(hackscript, serv);\\n\\t\\t\\t\\t\\tns.exec(hackscript, serv, threads, target);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t}\\n\\n\\t/////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\t////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\tvar pcount = 0; //counter for private servers purchased as the for loops go through.\\n\\tvar pservs = ns.getPurchasedServers();\\n\\tfor (var r = 0; r < pservs.length; ++r) {\\n\\t\\tpcount = r + 1;\\n\\t}\\n\\n\\tns.tprint(\\\"You have \\\" + pcount + \\\" private servers.\\\");\\n\\n\\n\\tif (pcount > 0) {\\n\\t\\t//code to kill all running scripts on all player servers. Assumes you have the max of 25 already.\\n\\t\\tvar pservs = ns.getPurchasedServers();\\n\\t\\tfor (var int = 0; int < pservs.length; ++int) {\\n\\t\\t\\tvar pserv = pservs[int];\\n\\t\\t\\tns.killall(pserv);\\n\\t\\t}\\n\\n\\t\\t//code to start copying hack scripts to private servers.\\n\\t\\t////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\t\\tvar pservs = ns.getPurchasedServers();\\n\\t\\tfor (var int = 0; int < pservs.length; ++int) {\\n\\n\\t\\t\\tvar pserv = pservs[int];\\n\\t\\t\\tvar maxram = ns.getServerMaxRam(pserv);\\n\\t\\t\\tvar usedram = ns.getServerUsedRam(pserv);\\n\\t\\t\\tvar availram = maxram - usedram;\\n\\t\\t\\tvar threads = (availram / div) / pmemdiv;\\n\\n\\t\\t\\tfor (var z = 0; z < div; ++z) {\\n\\n\\t\\t\\t\\tfor (var i = 1; i < tservs.length - 1; ++i) {\\n\\t\\t\\t\\t\\tvar t1 = tservs[i].split('\\\",');\\n\\t\\t\\t\\t\\tvar target = t1.toString();\\n\\n\\t\\t\\t\\t\\tawait ns.scp(hackscript, pserv);\\n\\t\\t\\t\\t\\tawait ns.scp(sfile, pserv);\\n\\t\\t\\t\\t\\tawait ns.scp(tfile, pserv);\\n\\t\\t\\t\\t\\tns.exec(hackscript, pserv, threads, target);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else (ns.tprint(\\\"NO PRIV SERVS PURCHASED\\\"))\\n\\n\\tns.toast(\\\"bl173 finished running!\\\");\\n\\n}\",\"filename\":\"earlystart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlystart.js\",\"url\":\"blob:file:///3160f557-0cf7-414c-bba6-1e224014cae7\"}],\"dependents\":[],\"ramUsage\":8.15,\"server\":\"home\",\"moduleSequenceNumber\":49385,\"_hash\":\"bf34b6ee4501022d1eacf925dcbbe17223cc81a7eea32674783f74d2818b19fd\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\n    var doc = \\\"1337.script\\\";\\n    ns.bypass(document);\\n    ns.startExploits();\\n\\n}\",\"filename\":\"/scrips/exploits.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scrips/exploits.js\",\"url\":\"blob:https://danielyxie.github.io/dac94517-f8b6-4484-ab01-e1c89d9590d2\",\"moduleSequenceNumber\":362073}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":49386,\"_hash\":\"a986d6917d631908d6e94d773e5c1b844cfea9d3f95c300c5153c55a78996066\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nns.tprint(ns.getBitNodeMultipliers());\\n}\",\"filename\":\"bitnodemulti.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bitnodemulti.js\",\"url\":\"blob:file:///944f46bb-3ef5-4222-8ea6-af61446cfe16\",\"moduleSequenceNumber\":224501}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":49387,\"_hash\":\"254a7cec5f9d25991ff1413cef2795bf8219f0c2186d64dadd14ae88385a4087\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail(\\\"args.js\\\");\\n\\tvar server = \\\"magi-0\\\";\\n\\n\\t\\tns.exec(\\\"arg2.js\\\", server, 1, \\\"arg2.js\\\", 0);\\n\\t\\tns.tprint(\\\"Executed script on: \\\" + server);\\n\\n}\",\"filename\":\"args.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"args.js\",\"url\":\"blob:file:///e3cca0ff-e72b-442d-9b41-9cffbd9af8f1\"}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":49388,\"_hash\":\"c1c922e565330311fec177617ba0c4768f1f01febdef4a8384bde5e06dfc374c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tvar server = \\\"magi-0\\\";\\n\\tvar target = \\\"foodnstuff\\\";\\n\\tvar script = ns.args[0];\\n\\tvar count = ns.args[1];\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tvar freeram = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n\\tvar smem = ns.getScriptRam(\\\"arg2.js\\\");\\n\\n\\tfor (var i = 0; i < 5; ++i) {\\n\\t\\tns.exec(script, server, 1, script, count);\\n\\t\\tns.tprint(\\\"Executed \\\" + script + \\\" script on: \\\" + server);\\n\\t\\t++count;\\n\\t\\tns.tprint(\\\"Count: \\\" + count);\\n\\t}\\n\\twhile (ns.hasRootAccess(target) && freeram > smem) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"arg2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"arg2.js\",\"url\":\"blob:file:///9bddbe33-4197-4021-9b57-9e79a2af2423\"}],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"home\",\"moduleSequenceNumber\":49389,\"_hash\":\"b2a860cb0fcfc2c0fa269160e7aedf28d9ef335a902e9d1a866a4115167ede36\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"1337.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"1337.js\",\"url\":\"blob:file:///00020427-d1fb-4cc6-9f56-e0daf1523eac\"}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49390,\"_hash\":\"01639b7595ccf39e898fcbee9774322274f571e9942f7f98bd9bb9847cd68ea8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/cc3c729f-58cc-4e2d-a95e-1b9261eae29e\",\"moduleSequenceNumber\":49504}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":49504,\"_hash\":\"03102545d59c841d15a0ee0ad248f1c1b4b0481d17ac5a749e8ede9b57a0487b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nns.wget(\\\"https://github.com/lunarstatic/bitburner/blob/main/bl173.js\\\", \\\"bl173.js\\\");\\nns.wget(\\\"https://github.com/lunarstatic/bitburner/blob/main/x.js\\\", \\\"x.js\\\");\\nns.wget(\\\"https://github.com/lunarstatic/bitburner/blob/main/st.js\\\", \\\"st.js\\\");\\nns.wget(\\\"https://github.com/lunarstatic/bitburner/blob/main/targs.txt\\\", \\\"targs.txt\\\");\\nns.wget(\\\"https://github.com/lunarstatic/bitburner/blob/main/targs2.txt\\\", \\\"targs2.txt\\\");\\nns.wget(\\\"https://github.com/lunarstatic/bitburner/blob/main/servs.txt\\\", \\\"servs.txt\\\");\\n\\n\\n}\",\"filename\":\"update.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":49392,\"_hash\":\"694eec7770155f006018641d5f986a9806b455efa0bd15c457c9110002f67dc6\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail(\\\"st.js\\\");\\n\\n\\tvar home = \\\"home\\\";\\n\\tvar targ = \\\"n00dles\\\";\\n\\tvar i = 0;\\n\\tvar f = 0;\\n\\tvar hacklvl = ns.getHackingLevel();\\n\\tvar script = \\\"x.js\\\";\\n\\n\\n\\tvar servs = [\\n\\t\\t\\\"n00dles\\\",\\n\\t\\t\\\"foodnstuff\\\",\\n\\t\\t\\\"sigma-cosmetics\\\",\\n\\t\\t\\\"joesguns\\\",\\n\\t\\t\\\"nectar-net\\\",\\n\\t\\t\\\"hong-fang-tea\\\",\\n\\t\\t\\\"harakiri-sushi\\\",\\n\\t\\t\\\"neo-net\\\",\\n\\t\\t\\\"zer0\\\",\\n\\t\\t\\\"max-hardware\\\",\\n\\t\\t\\\"iron-gym\\\",\\n\\t\\t\\\"phantasy\\\",\\n\\t\\t\\\"omega-net\\\",\\n\\t\\t\\\"the-hub\\\",\\n\\t\\t\\\"lexo-corp\\\",\\n\\t\\t\\\"microdyne\\\",\\n\\t\\t\\\"unitalife\\\",\\n\\t\\t\\\"silver-helix\\\",\\n\\t\\t\\\"rho-construction\\\",\\n\\t\\t\\\"netlink\\\",\\n\\t\\t\\\"aevum-police\\\",\\n\\t\\t\\\"summit-uni\\\",\\n\\t\\t\\\"alpha-ent\\\",\\n\\t\\t\\\"solaris\\\",\\n\\t\\t\\\"run4theh111z\\\",\\n\\t\\t\\\"millenium-fitness\\\",\\n\\t\\t\\\"catalyst\\\",\\n\\t\\t\\\"omnia\\\",\\n\\t\\t\\\".\\\",\\n\\t\\t\\\"avmnite-02h\\\",\\n\\t\\t\\\"titan-labs\\\",\\n\\t\\t\\\"zb-institute\\\",\\n\\t\\t\\\"rothman-uni\\\",\\n\\t\\t\\\"univ-energy\\\",\\n\\t\\t\\\"I.I.I.I\\\",\\n\\t\\t\\\"global-pharm\\\",\\n\\t\\t\\\"omnitek\\\",\\n\\t\\t\\\"blade\\\",\\n\\t\\t\\\"fulcrumtech\\\",\\n\\t\\t\\\"helios\\\",\\n\\t\\t\\\"stormtech\\\",\\n\\t\\t\\\"ecorp\\\",\\n\\t\\t\\\"megacorp\\\",\\n\\t\\t\\\"nwo\\\",\\n\\t]\\n\\n\\n\\t//count how many exes we have\\n\\tvar execount = 0;\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t++execount\\n\\t}\\n\\n\\tns.tprint(\\\"You have \\\" + execount + \\\" port openers.\\\"); //How many exe's do I have?\\n\\n\\tfor (var j = 0; j < servs.length; ++j) {\\n\\t\\tvar serv = servs[j].split('\\\",');\\n\\t\\tif (!ns.hasRootAccess(serv) && ns.getServerRequiredHackingLevel(serv) <= hacklvl) { //make sure you can hack this server if you haven't already\\n\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\t\\t\\tns.brutessh(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"BruteSSH.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\t\\t\\tns.ftpcrack(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"FTPCrack.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\t\\t\\tns.httpworm(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"HTTPWorm.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\t\\t\\tns.relaysmtp(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"relaySMTP.exe does not exist.\\\"));\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\t\\t\\tns.sqlinject(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"SQLInject.exe does not exist.\\\"));\\n\\n\\t\\t\\tif (ns.getServerNumPortsRequired(serv) <= execount) {\\n\\t\\t\\t\\tns.nuke(serv);\\n\\t\\t\\t} else (ns.tprint(\\\"Cannot NUKE \\\" + targ + \\\" : Cannot open the needed # of ports.\\\"))\\n\\t\\t}\\n\\t}\\n\\n\\t/////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\t////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\tvar pcount = 0; //counter for private servers purchased as the for loops go through.\\n\\tvar pservs = ns.getPurchasedServers();\\n\\tfor (var r = 0; r < pservs.length; ++r) {\\n\\t\\tpcount = r + 1;\\n\\t}\\n\\n\\tns.tprint(\\\"You have \\\" + pcount + \\\" private servers.\\\");\\n\\n\\n\\tif (pcount > 0) {\\n\\t\\t//code to kill all running scripts on all player servers. Assumes you have the max of 25 already.\\n\\t\\tvar pservs = ns.getPurchasedServers();\\n\\t\\tfor (var int = 0; int < pservs.length; ++int) {\\n\\t\\t\\tvar pserv = pservs[int];\\n\\t\\t\\tns.killall(pserv);\\n\\t\\t}\\n\\n\\t\\t//code to start copying hack scripts to private servers.\\n\\t\\t////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\t\\tvar pservs = ns.getPurchasedServers();\\n\\t\\tfor (var int = 0; int < pservs.length; ++int) {\\n\\n\\t\\t\\tvar pserv = pservs[int];\\n\\t\\t\\tvar maxram = ns.getServerMaxRam(pserv);\\n\\t\\t\\tvar usedram = ns.getServerUsedRam(pserv);\\n\\t\\t\\tvar availram = maxram - usedram;\\n\\t\\t\\tvar threads = availram / ns.getScriptRam(script);\\n\\n\\n\\t\\t\\tawait ns.scp(script, pserv);\\n\\t\\t\\tns.exec(script, pserv, threads, targ);\\n\\n\\n\\t\\t}\\n\\t} else (ns.tprint(\\\"NO PRIV SERVS PURCHASED\\\"))\\n\\n\\n\\n\\n\\n\\n\\t//kill script then copy current version from home to each serv\\n\\tfor (i = 0; i < servs.length; ++i) {\\n\\t\\tvar serv = servs[i].split('\\\",');\\n\\t\\tns.scriptKill(script, serv);\\n\\t\\tns.tprint(\\\"Copying script to \\\" + serv);\\n\\t\\tawait ns.scp(script, home, serv);\\n\\t}\\n\\n\\n\\n\\t//run x script on each serv to attack target\\n\\tfor (f = 0; f < servs.length; ++f) {\\n\\t\\t//calc how many threads to run based on server max ram\\n\\t\\tvar serv = servs[f].split('\\\",');\\n\\t\\tvar maxram = ns.getServerMaxRam(serv);\\n\\t\\tvar memsc = ns.getScriptRam(script);\\n\\t\\tvar threads = maxram / memsc;\\n\\n\\t\\tns.tprint(\\\"Enslaving \\\" + serv);\\n\\t\\tns.exec(script, serv, threads, targ);\\n\\t}\\n\\n\\t//run x script on home server with room to run this script again\\n\\tvar hthreads = (ns.getServerMaxRam(home) - ns.getScriptRam(script)) / ns.getScriptRam(script);\\n\\tif (ns.scriptRunning(script, home)) {\\n\\t\\tns.scriptKill(script, home);\\n\\t}\\n\\n\\tns.exec(script, home, hthreads, targ)\\n\\tns.tprint(\\\"Script running on home.\\\");\\n\\n\\n\\t/////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\t////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\tvar pcount = 0; //counter for private servers purchased as the for loops go through.\\n\\tvar pservs = ns.getPurchasedServers();\\n\\tfor (var r = 0; r < pservs.length; ++r) {\\n\\t\\tpcount = r + 1;\\n\\t}\\n\\n\\tns.tprint(\\\"You have \\\" + pcount + \\\" private servers.\\\");\\n\\n\\n\\tif (pcount > 0) {\\n\\t\\t//code to kill all running scripts on all player servers. Assumes you have the max of 25 already.\\n\\t\\tvar pservs = ns.getPurchasedServers();\\n\\t\\tfor (var int = 0; int < pservs.length; ++int) {\\n\\t\\t\\tvar pserv = pservs[int];\\n\\t\\t\\tns.killall(pserv);\\n\\t\\t}\\n\\n\\t\\t//code to start copying hack scripts to private servers.\\n\\t\\t////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\t\\tvar pservs = ns.getPurchasedServers();\\n\\t\\tfor (var int = 0; int < pservs.length; ++int) {\\n\\n\\t\\t\\tvar pserv = pservs[int];\\n\\t\\t\\tvar maxram = ns.getServerMaxRam(pserv);\\n\\t\\t\\tvar usedram = ns.getServerUsedRam(pserv);\\n\\t\\t\\tvar availram = maxram - usedram;\\n\\t\\t\\tvar threads = availram / ns.getScriptRam(script);\\n\\n\\n\\n\\n\\t\\t\\tawait ns.scp(script, pserv);\\n\\t\\t\\tns.exec(script, pserv, threads, targ);\\n\\n\\n\\t\\t}\\n\\t} else (ns.tprint(\\\"NO PRIV SERVS PURCHASED\\\"))\\n\\n\\n}\",\"filename\":\"st.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"st.js\",\"url\":\"blob:https://danielyxie.github.io/b77e3937-d62a-4eaf-9b24-e3b854b1aef9\",\"moduleSequenceNumber\":324760}],\"dependents\":[],\"ramUsage\":9.15,\"server\":\"home\",\"moduleSequenceNumber\":49393,\"_hash\":\"d45ec893587601f3b43e83231ef81d5583d9f735ec4595ae05f0dad0c0167843\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\tvar gblevels = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096,\\n\\t\\t8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576];\\n\\n\\n\\tns.tprint(\\\"Current Servers: \\\" + ns.getPurchasedServers());\\n\\tns.tprint(\\\"Max Servers Available to Purchase: \\\" + ns.getPurchasedServerLimit());\\n\\n\\tvar pservs = ns.getPurchasedServers();\\n\\n\\tfor (var i = 0; i < pservs.length; ++i) {\\n\\n\\t\\tvar pserv = pservs[i].split('\\\",\\\"');\\n\\t\\tns.tprint(pserv + \\\" RAM: \\\" + ns.getServerMaxRam(pserv));\\n\\t}\\n\\n\\tns.tprint(\\\"You have \\\" + i + \\\" purchased servers.\\\");\\n\\n\\n\\tvar i = 0;\\n\\n\\twhile (i <= 19) {\\n\\n\\t\\tvar ramcost = [];\\n\\n\\t\\tramcost.push(gblevels.pop());\\n\\n\\t\\tns.tprint(\\\"Cost for \\\" + ramcost + \\\"gb server: \\\");\\n\\t\\tns.tprint(\\\"$\\\" + ns.nFormat(ns.getPurchasedServerCost(ramcost), '0,0') + \\\" x1\\\");\\n\\t\\tns.tprint(\\\"$\\\" + ns.nFormat(ns.getPurchasedServerCost(ramcost) * 25, '0,0') + \\\" x25\\\");\\n\\n\\n\\n\\n\\t\\t++i;\\n\\t}\\n\\n}\",\"filename\":\"pricelist.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"pricelist.js\",\"url\":\"blob:https://danielyxie.github.io/c0cc1076-9e31-4938-b0e8-f22d46b33c8d\",\"moduleSequenceNumber\":321728}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":49394,\"_hash\":\"d0834ea8d6787b6420f2e6ef67d32d147b26d3d284101e04ee2bc7b599260634\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nvar maxram = 1048576;\\n\\n\\nvar homemoney = ns.getServerMoneyAvailable(\\\"home\\\");\\nvar servcost25 = ns.getPurchasedServerCost(maxram) * 25;\\n\\nfor (var i = 0; i < ns.getPurchasedServerLimit(); ++i) {\\n\\n    if (homemoney > servcost25) {\\n        var hostname = \\\"magi-\\\" + i;\\n        ns.purchaseServer(hostname, maxram);\\n    }\\n}\\n//ns.exec(\\\"stan.js\\\", \\\"home\\\", 1);\\n}\",\"filename\":\"buyserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buyserv.js\",\"url\":\"blob:https://danielyxie.github.io/e696b6c8-b381-461c-9597-912504d15b36\",\"moduleSequenceNumber\":321917}],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":49395,\"_hash\":\"5651f0f14ad69ab63880606a142aaf0c8956d9488f8a814fd36ff1cd1f5d9f0c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar i = 0;\\n\\n\\twhile (i <= 24) {\\n\\t\\tvar hostname = \\\"magi-\\\" + i;\\n\\t\\tns.killall(hostname);\\n\\t\\tns.deleteServer(hostname);\\n\\t\\ti = i + 1;\\n\\n\\t}\\n}\",\"filename\":\"delserv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"delserv.js\",\"url\":\"blob:file:///1c3d9702-7f9d-4af4-a355-7ec581aca524\",\"moduleSequenceNumber\":66861}],\"dependents\":[],\"ramUsage\":4.35,\"server\":\"home\",\"moduleSequenceNumber\":49396,\"_hash\":\"77b156a8513a7b30d1fc631a9186f35238363fbda0ec3c599afbab2ea9adbf77\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = \\\"ecorp\\\";\\n\\n\\t\\n\\tvar hackamt = 1000000000000;\\n\\tvar weaktime = ns.getWeakenTime(target);\\n\\tvar growtime = ns.getGrowTime(target);\\n\\tvar hacktime = ns.getHackTime(target);\\n\\tvar threads = ns.hackAnalyzeThreads(target, hackamt);\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\tvar maxram = ns.getServerMaxRam(target);\\n\\tvar usedram = ns.getServerUsedRam(target);\\n\\tvar availram = maxram - usedram;\\n\\n\\n\\n\\tns.tprint(\\\"Threads needed to hack 1t from : \\\" + target + \\\" \\\" + ns.nFormat(ns.hackAnalyzeThreads(target, hackamt), '0,0'));\\n\\tns.tprint(\\\"Time needed to weaken : \\\" + target + \\\" \\\" + ns.tFormat(ns.getWeakenTime(target), '0,0'));\\n\\tns.tprint(\\\"Time needed to grow : \\\" + target + \\\" \\\" + ns.tFormat(ns.getGrowTime(target), '0,0'));\\n\\tns.tprint(\\\"Time needed to hack : \\\" + target + \\\" \\\" + ns.tFormat(ns.getHackTime(target), '0,0'));\\n\\n\\n\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n\\n}\",\"filename\":\"analyze.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"analyze.js\",\"url\":\"blob:https://danielyxie.github.io/d80b60ee-377a-4593-a75e-f4041f77e95a\",\"moduleSequenceNumber\":361885}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":49397,\"_hash\":\"29722b917502fcae4f8b8f5a616424742c94498f2da73c74932a2e31db922b28\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.share(\\\"home\\\");\\n\\t}\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///8a37bfa7-4691-44ac-bfc5-52849c75749a\",\"moduleSequenceNumber\":3865}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":49398,\"_hash\":\"7621f7ce33cf744490721d0af7cc02fe2b147226471a8644c4ac0c4b14b5483f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar serv = \\\"n00dles\\\";\\nwhile(true){await ns.weaken(serv);}\\n}\",\"filename\":\"lvl.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lvl.js\",\"url\":\"blob:file:///aa379064-3879-4ef3-8da1-dc98ba82c76d\",\"moduleSequenceNumber\":394848}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":49399,\"_hash\":\"65ad5a5d132549ed6c5d5c706d435f763955f0b158006bc758a92e08eedeefca\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n//Copies current hack script to all private servers.\\n//8190\\n\\nvar i = 0;\\nvar script = \\\"lvl.js\\\";\\nvar target = \\\"n00dles\\\";\\nvar scriptmem = ns.getScriptRam(script);\\n\\nwhile (i <= 24) {\\n\\n        var hostname = (\\\"magi-\\\" + i);\\n        var maxram = ns.getServerMaxRam(hostname);\\n        ns.killall(hostname);\\n        ns.tprint(\\\"Removing old script from: \\\" + hostname);\\n        await ns.scp(script, hostname);\\n        ns.tprint(\\\"Copying new script to: \\\" + hostname);\\n        ns.exec(script, hostname, maxram/scriptmem);\\n        ns.tprint(\\\"Initializing new script on: \\\" + hostname);\\n        ++i;\\n    \\n}\\n}\",\"filename\":\"scp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scp.js\",\"url\":\"blob:file:///1496336b-ccdc-4acd-99a9-37d5402967a2\",\"moduleSequenceNumber\":393900}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":49400,\"_hash\":\"05833c529bbc4eb0a3c80899910126774e320438996855497d29f57480a9e4d2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   while (ns.getFactionRep(\\\"CyberSec\\\") < 100000) {\\n      ns.workForFaction(\\\"CyberSec\\\", \\\"Hacking\\\", 0);\\n      await ns.sleep(60000);\\n   }\\n\\n   while (ns.getFactionRep(\\\"NiteSec\\\") < 135000) {\\n      ns.workForFaction(\\\"NiteSec\\\", \\\"Hacking\\\", 0);\\n      await ns.sleep(60000);\\n   }\\n/*\\n   while (ns.getFactionRep(\\\"Tian Di Hui\\\") < 225000) {\\n      ns.workForFaction(\\\"Tian Di Hui\\\", \\\"Hacking\\\");\\n      await ns.sleep(60000);\\n   }\\n\\n   while (ns.getFactionRep(\\\"Chongqing\\\") < 112500) {\\n      ns.workForFaction(\\\"Chongqing\\\", \\\"Hacking\\\");\\n      await ns.sleep(60000);\\n   }\\n\\n\\n   while (ns.getFactionRep(\\\"The Black Hand\\\") < 100000) {\\n      ns.workForFaction(\\\"The Black Hand\\\", \\\"Hacking\\\");\\n      await ns.sleep(60000);\\n   }\\n\\n   while (ns.getFactionRep(\\\"BitRunners\\\") < 1000000) {\\n      ns.workForFaction(\\\"BitRunners\\\", \\\"Hacking\\\");\\n      await ns.sleep(60000);\\n   }\\n\\n   while (ns.getFactionRep(\\\"Daedalus\\\") < 1000000) {\\n      ns.workForFaction(\\\"Daedalus\\\", \\\"Hacking\\\");\\n      await ns.sleep(60000);\\n   }\\n\\n*/\\n\\n\\n}\",\"filename\":\"work.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"work.js\",\"url\":\"blob:file:///65867524-92f2-4a47-afd5-c5ff6ced99f5\",\"moduleSequenceNumber\":244038}],\"dependents\":[],\"ramUsage\":65.6,\"server\":\"home\",\"moduleSequenceNumber\":49401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\nvar script = \\\"s.js\\\";\\nvar threads = ns.getServerMaxRam(\\\"home\\\")/ns.getScriptRam(script);\\nns.exec(script, \\\"home\\\", threads-ns.getScriptRam(\\\"stanek.js\\\"));\\n\\n\\n}\",\"filename\":\"stanek.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"stanek.js\",\"url\":\"blob:https://danielyxie.github.io/7204c263-c9be-4307-a04a-e96f71b20520\",\"moduleSequenceNumber\":143899}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":143899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\n\\twhile (true) {\\n//\\t\\tawait ns.stanek.charge(1, 0);\\n//\\t\\tawait ns.stanek.charge(5, 1);\\n//\\t\\tawait ns.stanek.charge(2, 2);\\n//\\t\\tawait ns.stanek.charge(1, 4); \\n//\\t\\tawait ns.stanek.charge(0, 5); \\n\\t\\tawait ns.stanek.charge(0, 0);\\n\\n\\t}\\n\\n\\n}\",\"filename\":\"s.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"s.js\",\"url\":\"blob:https://danielyxie.github.io/59ee3f17-20df-4cbe-9575-f842cb2ac4d7\",\"moduleSequenceNumber\":47844}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":49403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.charge\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tns.tail(\\\"hacknet.js\\\");\\n\\n\\tvar homemoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n\\tvar hashes = ns.hacknet.numHashes();\\n\\tns.tprint(\\\"Current hashes: \\\" + ns.hacknet.numHashes());\\n\\tns.tprint(\\\"Your current money: \\\" + homemoney);\\n\\tns.tprint(\\\"Sell for Money hash cost: \\\" + ns.hacknet.hashCost(\\\"Sell for Money\\\"));\\n\\tns.tprint(\\\"Next Node Cost: \\\" + ns.hacknet.getPurchaseNodeCost());\\n\\tns.tprint(\\\"Max Nodes: \\\" + ns.hacknet.maxNumNodes())\\n\\n\\n\\twhile (true) {\\n\\t\\tif (hashes >= 4) {\\n\\t\\t\\tns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n\\n\\n\\t\\t\\tif (ns.hacknet.getPurchaseNodeCost() <= homemoney) {\\n\\t\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait ns.sleep(1)\\n\\n\\n\\t\\t}\\n\\t\\tawait ns.sleep(2)\\n\\n\\n\\n\\n\\n\\n\\n\\t\\t\\n\\t}\\n}\",\"filename\":\"hacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacknet.js\",\"url\":\"blob:https://danielyxie.github.io/c55fcc26-e21d-452b-9ef5-6196b701cc0a\",\"moduleSequenceNumber\":210134}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":210134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"donthack.txt\",\"text\":\"home,\\r\\nmagi-0,\\r\\nmagi-1,\\r\\nmagi-2,\\r\\nmagi-3,\\r\\nmagi-4,\\r\\nmagi-5,\\r\\nmagi-6,\\r\\nmagi-7,\\r\\nmagi-8,\\r\\nmagi-9,\\r\\nmagi-10,\\r\\nmagi-11,\\r\\nmagi-12,\\r\\nmagi-13,\\r\\nmagi-14,\\r\\nmagi-15,\\r\\nmagi-16,\\r\\nmagi-17,\\r\\nmagi-18,\\r\\nmagi-19,\\r\\nmagi-20,\\r\\nmagi-21,\\r\\nmagi-22,\\r\\nmagi-23,\\r\\nmagi-24,\\r\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs2.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/scrips/doc.txt\",\"text\":\"\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"scanned.txt\",\"text\":\"magi-24,\\n\\r\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs3.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"end\\\",\\r\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":7,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-835220.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[176,21,128,142,117,191,110,172,184,114,76,8,184,129,131,81,173,159,32,176,97,8,21,151,17,139,72,198,130,195,142,45,109,148,135,12,168,197,127,124,114,79,66,157,192,134,132,102]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"70.5.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":15301264308,\"moneyMax\":153012643080,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1199,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"41.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":28912401965,\"moneyMax\":289124019650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1129,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1338.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,8],[2,9],[22,23],[5,7],[11,16],[16,24],[24,30],[10,13],[18,20],[11,19],[6,11],[24,32],[10,12],[16,26],[21,31]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-920154-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[42,52,197,100,76,11,135,43,112,7,161],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-717312-TianDiHui.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((()a))()\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"67.0.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":13129278207,\"moneyMax\":131292782070,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1124,\"serverGrowth\":68}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-28093-Joe'sGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[23,50,44,6,30,7,26],[20,8,38,28,25,47,34],[23,5,32,42,20,47,12]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"82.8.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":5202145695.5,\"moneyMax\":52021456955,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":975,\"serverGrowth\":66}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"78.5.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":19751700530.5,\"moneyMax\":197517005305,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":987,\"serverGrowth\":72}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-39503.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1],[1,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"68.4.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85.5,\"hackDifficulty\":85.5,\"minDifficulty\":29,\"moneyAvailable\":10044710014,\"moneyMax\":100447100140,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1215,\"serverGrowth\":57}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-958221-Joe'sGuns.cct\",\"type\":\"Total Ways to Sum\",\"data\":13,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-916979.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[16,52,77,148,132,16,105,105,193,43,112,86,169,82,11,20,89,186,186,136,167,15,18,101,21,1,130,148,176,150,3,11],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"62.9.3.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":145.5,\"hackDifficulty\":145.5,\"minDifficulty\":49,\"moneyAvailable\":9446678942,\"moneyMax\":94466789420,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":972,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790816-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[81,162,149,71,92,50,159,52,184,182,195,50,84,118,3,189,31,96,55,166,154,98,17,162,68,62,121,161,138,142,200,6,159,69,143],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"94.1.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"minDifficulty\":35,\"moneyAvailable\":11126351640,\"moneyMax\":111263516400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1141,\"serverGrowth\":77}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-668895-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[112,192,37,178,164,136,78,69,166,59,8,19,13,94,23,156,128,6,133,85,193,19,29],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-634468.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[143,180,1,48,155,5,128,91,82,10,37,116,23,50,7,115,148,85,19],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"12.5.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147,\"hackDifficulty\":147,\"minDifficulty\":49,\"moneyAvailable\":11379888024,\"moneyMax\":113798880240,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"16.7.8.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":709958185.5,\"moneyMax\":7099581855,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1198,\"serverGrowth\":90}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-519857.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[150,83,72,17,149,152,152,66,34,87,108,135,63,151,54,160,44,115,79,157,180,200,18,70,42,122,200,63,47,114,70,166,194],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-35244-Sector-12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1],[1,0,0,0,1,0,0,0,1,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"99.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1593,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-810245.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[102,74,153,102,50,122,45,90,122,39,25,9,26,131,129,93,56,91,116,69,126,72,99,13,20,88,111,5,36,39,110,144,88,130]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-77279.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a(()(()\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"23.7.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":559912605,\"moneyMax\":5599126050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":901,\"serverGrowth\":86}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-324910-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,9],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-47215.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[4,8],[9,7,2],[6,6,1,9],[9,3,7,5,1],[3,2,5,7,4,4],[4,1,2,1,7,8,2],[1,9,3,7,4,2,2,9],[8,7,6,9,9,6,2,8,9],[8,2,8,6,9,4,6,3,5,2]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783583.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a()a))a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"39.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":132,\"hackDifficulty\":132,\"minDifficulty\":44,\"moneyAvailable\":417748575,\"moneyMax\":4177485750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":56}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-665195-Joe'sGuns.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,17],[10,19],[5,11],[1,5],[13,17]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-695054-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[35,41,102,114,18,198,161,185,95,34,3,64,46,94,27,165,62,150,30,57,49,117,123],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"31.7.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":385883359.5,\"moneyMax\":3858833595,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":943,\"serverGrowth\":36}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-584286-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[91,42,200,165,48,97,185,21,44,20,66,77,9,66,72,84,29,73,66,108,134,35],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-709579.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a())(((()a)()()())\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"67.6.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":141,\"hackDifficulty\":141,\"minDifficulty\":47,\"moneyAvailable\":298207425,\"moneyMax\":2982074250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":74}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-813308.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())aa)(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-251368.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[120,96,64,117,173,57,188,109,182,81,117,6,116,120,67,66,122,129,155,141,49,197,167,170,64,17,21,32,33,13,62,97,55,198],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"0.6.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":377631210,\"moneyMax\":3776312100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":869,\"serverGrowth\":74}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772124-Joe'sGuns.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8245073828\",-8],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"34.7.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"minDifficulty\":45,\"moneyAvailable\":454163392,\"moneyMax\":4541633920,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"21.9.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":556756671,\"moneyMax\":5567566710,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"75.9.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":399260514,\"moneyMax\":3992605140,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":68}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-14450-Joe'sGuns.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1211702625\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-704617-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,1,0],[1,0,1,0,1,0,0,1,0,1,0,0],[0,1,0,0,0,0,0,0,1,0,0,0],[1,0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0,0,0],[0,1,0,0,0,0,0,0,1,0,1,0]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"37.4.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":349027772.5,\"moneyMax\":3490277725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":83}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"68.3.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":114,\"hackDifficulty\":114,\"minDifficulty\":38,\"moneyAvailable\":425077831.5,\"moneyMax\":4250778315,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-827450.cct\",\"type\":\"Total Ways to Sum\",\"data\":44,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-641029-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":46,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"68.4.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":395678283.5,\"moneyMax\":3956782835,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":72}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-9231-Joe'sGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[21,13,41],[10,30,48],[46,8,39],[2,36,38],[42,13,19],[11,18,14],[33,1,40],[49,5,50],[32,37,8],[25,22,7],[43,32,37],[9,32,33],[36,41,29]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-849930-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[159,167,174,133,104,197,113,118,4,10,131,66,73,153,136,18,52,115,142,113,63,98,1,37,40,13,73,82,120,200,118,133,133,115,170,91,137,37,100,20,150,68,97,6,116,38,159,35,147,94],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-378369-Joe'sGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":536588380,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"3.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":512402325,\"moneyMax\":5124023250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-817488-Joe'sGuns.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,23],[23,29],[5,11],[13,17],[12,16],[14,20],[18,23],[4,7],[9,12],[3,13],[19,29],[3,6],[9,10],[16,23],[11,18],[22,23],[7,15]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-866109.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"8711416667\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"58.2.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"minDifficulty\":48,\"moneyAvailable\":454254152.5,\"moneyMax\":4542541525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":927,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-319336-Joe'sGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[44,23,39,24,24,39,22,8,19,29],[36,46,25,32,34,41,32,6,37,47],[8,27,3,35,5,8,27,22,29,17],[16,10,49,4,40,30,17,42,11,31],[16,39,49,1,23,38,27,13,15,33],[49,35,2,10,20,19,49,32,16,34]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-89250.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[197,5,127,120,122,197,198,100,142,189,164,45,136,66,187,43,16,45,35,28,130,50,169,45,23,176,50,170,136,85,163,13,181,66,180],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"27.0.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":535220843.5,\"moneyMax\":5352208435,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-284956.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[4,6],[9,3,4]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"55.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102,\"hackDifficulty\":102,\"minDifficulty\":34,\"moneyAvailable\":465151833.5,\"moneyMax\":4651518335,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-606723.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":432498221,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-23972.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"54.4.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":416218998.5,\"moneyMax\":4162189985,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915058.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[133,181,77,57,28,129,91,4,140,111,34,117,52,144,120,170,108,155,188,163,164,173,141,71,15,174,168,54,110,178,56,118,1,110],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-50402-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[121,73,85,128,119,185,38,74,80,3,32,7,56,178,176,108,153,20,80,14,125,8,68,164,62]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-973920.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[81,159,112,66,92,141,118,84,126,61,146,153,112,86,51,48,111,78,62,121,179,12,175,184,144,4,8,179,80],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"26.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"minDifficulty\":42,\"moneyAvailable\":699669370.5,\"moneyMax\":6996693705,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":57}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-493235-Joe'sGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[7,3],[8,8,4],[7,7,1,8],[6,6,6,8,6],[8,9,3,5,3,6],[7,5,1,9,1,8,7],[3,6,8,8,8,6,9,2],[8,9,3,7,9,8,4,9,3],[9,3,4,9,1,8,5,1,1,6],[6,9,9,1,9,4,7,3,9,3,6],[5,1,7,9,3,7,4,3,4,9,8,5]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"18.0.2.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":828597792,\"moneyMax\":8285977920,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"76.3.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":551840104.5,\"moneyMax\":5518401045,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":72}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"81.5.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":653532019.5,\"moneyMax\":6535320195,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"89.2.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":507775263.5,\"moneyMax\":5077752635,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551790-TianDiHui.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3348\",-25],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"22.0.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":372424000.5,\"moneyMax\":3724240005,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":709,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"58.2.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":327651965,\"moneyMax\":3276519650,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":483,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"25.2.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":310920901.5,\"moneyMax\":3109209015,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-97194-Joe'sGuns.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a()(\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"99.1.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"minDifficulty\":37,\"moneyAvailable\":152067101,\"moneyMax\":1520671010,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":430,\"serverGrowth\":31}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262438-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[7,57,172,72,65,172,65],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-115952.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":818736370,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-249050.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2168653221\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"88.5.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":88358637.5,\"moneyMax\":883586375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":401,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"95.3.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":497075781.5,\"moneyMax\":4970757815,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767310-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[111,91,180,200,74,9,72,130,129,77,158,194,90,64,107,97,134,83,39,124,174,58,57,83,99,154,184,60,135,195,161,4,161,134,40,64,166]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-709105-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[4,156,138,160,15,190,66,61,165,139,127,113,45,129,198,11,169,49,4,183,2,104,91,6,12,146,133,167,138,16,78,132,23,2,71,102,53,136,98,31,134,175,7,141,131,57,193],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"77.7.4.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":105792907.5,\"moneyMax\":1057929075,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":457,\"serverGrowth\":50}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-967460-Sector-12.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,5],[21,31],[21,30]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"40.2.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":239839003.5,\"moneyMax\":2398390035,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":624,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-174389.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[19,41,30,42,41,28,39,33,45,17,9,28,47],[12,40,11,45,13,24,44,16,37,25,45,29,35],[35,30,28,33,38,7,26,12,16,11,4,23,4]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-150585.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[57,41,125,198,3,32,88,57,2,113,149,147,60,33,151,20,173,193,50,10,115,155,107,56,177,77,95,16,124]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"87.7.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":158806180,\"moneyMax\":1588061800,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":408,\"serverGrowth\":44}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-580337.cct\",\"type\":\"Total Ways to Sum\",\"data\":81,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-720015-TianDiHui.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"56234742\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"6.3.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":85333747.5,\"moneyMax\":853337475,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":275,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-826210-Joe'sGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":612200197,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-384.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))a()a()))))(((()(\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"37.8.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":124812409.5,\"moneyMax\":1248124095,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":391,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"51.0.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":424,\"serverGrowth\":55}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-686210-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[147,32,147,15,69,7,107,61,141,93,12,91,131,149,100,126,117,131,86,129,54,23,3,99,29,46,26,150,99,73,91,132,5,69,167,146,169,112,194,126,177,127,96,26,167,144],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592917.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[186,173,75,80,56,144,106,91,117,50,55,68,102,123,174,84,99,95,97,74,173,15,191,176,146,52,179,144,37,196,190,85,26],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"46.7.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":41198525,\"moneyMax\":411985250,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":275,\"serverGrowth\":62}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-585124-TianDiHui.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3109458\",33],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"53.7.4.6\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1043535,1328,1111,89]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2818.86858783135,\"onlineMoneyMade\":1043535,\"onlineRunningTime\":80424.60999968245,\"pid\":20,\"ramUsage\":2.45,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/5b2c7bb3-3cd0-49dc-bc19-3a22701be6d6\",\"moduleSequenceNumber\":49507}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/5b2c7bb3-3cd0-49dc-bc19-3a22701be6d6\",\"moduleSequenceNumber\":49507}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":49507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1.5,\"hackDifficulty\":5.859999999999979,\"minDifficulty\":1,\"moneyAvailable\":350000,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"31.6.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6548220,7944,6678,534]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16899.830821665128,\"onlineMoneyMade\":6548220,\"onlineRunningTime\":80424.60999968245,\"pid\":21,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/a7d1242c-9511-4949-9018-6127b02636b5\",\"moduleSequenceNumber\":49510}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/a7d1242c-9511-4949-9018-6127b02636b5\",\"moduleSequenceNumber\":49510}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":49510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-752614.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[28,35,17,35,7,25,43,3],[27,40,1,27,39,2,40,3]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-427626.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[70,99,192,182,70,87,104,73,48,188,68,121,74,55,197,64,61,58,54,152,144,119,64,27,39,81,150,76,127,97,86,116,192,156,82,79,184,44,60,192,159,16,152,11,140,119,125,107,132],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"58.9.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6585702,7986,6660,540]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16933.282584970093,\"onlineMoneyMade\":6585702,\"onlineRunningTime\":80424.60999968245,\"pid\":22,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/7bb90424-3b2f-4844-af18-8ca8b8e3bbbf\",\"moduleSequenceNumber\":123361}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/7bb90424-3b2f-4844-af18-8ca8b8e3bbbf\",\"moduleSequenceNumber\":123361}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":123361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1150000,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-244433-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,7],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-451484-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[116,88,187,1,186,65,88,83,108,79,19,28,18,97,54,178,10,123,74,198,92,134,42,130,118,188,47,168,93,146,172,196,16],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"91.1.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6478470,7926,6708,534]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16913.211526987114,\"onlineMoneyMade\":6478470,\"onlineRunningTime\":80424.60999968245,\"pid\":23,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/040f6845-e125-4b90-921f-83bb36864d7b\",\"moduleSequenceNumber\":123364}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/040f6845-e125-4b90-921f-83bb36864d7b\",\"moduleSequenceNumber\":123364}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":123364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1250000,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-933748-Joe'sGuns.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"16618216240\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"64.1.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13960310,17121,14586,1157]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36645.29164180824,\"onlineMoneyMade\":13960310,\"onlineRunningTime\":80424.60999968245,\"pid\":28,\"ramUsage\":2.45,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/34e3dab6-6f6f-434b-b8d1-6bb99d20849a\",\"moduleSequenceNumber\":343176}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zer0\",\"moduleSequenceNumber\":343176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":3750000,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-100312.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,10,0,10,9,4,6,7,0,6,4,7,9,3,10,0,9,4,1,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-983063.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,9,7,2,0,7,0,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"10.0.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6468378,7968,6666,534]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16913.211526987114,\"onlineMoneyMade\":6468378,\"onlineRunningTime\":80424.60999968245,\"pid\":24,\"ramUsage\":2.45,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/c1566e00-4da4-45f6-8910-cc00b1db21a9\",\"moduleSequenceNumber\":123367}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/c1566e00-4da4-45f6-8910-cc00b1db21a9\",\"moduleSequenceNumber\":123367}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":123367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1375000,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-699000-Joe'sGuns.cct\",\"type\":\"Total Ways to Sum\",\"data\":34,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-624830-Joe'sGuns.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())((a\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500669-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[170,190,52,91,184,106,6,69,11,116,120,120,62,54,119,123,22,110,55,100,189,104,17,50,94,31,22,161,81,34,93,180,81,56,6,91,195,149,15,174,173,144,27,85,170,200,14,34,129,111],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"11.4.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[14486498,17290,14417,1157]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36645.29164180824,\"onlineMoneyMade\":14486498,\"onlineRunningTime\":80424.60999968245,\"pid\":27,\"ramUsage\":2.45,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/cfa4a354-a3a9-470c-8b5a-cb3efaaa179c\",\"moduleSequenceNumber\":123376}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/cfa4a354-a3a9-470c-8b5a-cb3efaaa179c\",\"moduleSequenceNumber\":123376}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":123376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":2500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-766220-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,10],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"97.9.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982590-TianDiHui.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[23,25],[9,17],[4,14],[22,26],[10,13],[6,8],[11,18]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-806694.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,24],[22,32],[21,30],[20,24],[18,23],[11,21],[11,16],[21,25],[6,8],[2,7],[9,13],[16,20],[19,20],[19,25],[1,3],[8,11],[9,12],[16,23],[8,9],[18,25]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"53.4.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6164868,7902,6720,534]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16899.830821665128,\"onlineMoneyMade\":6164868,\"onlineRunningTime\":80424.60999968245,\"pid\":25,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/dfcbffaf-2bdb-4738-bc20-556e5e7844e6\",\"moduleSequenceNumber\":123370}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/dfcbffaf-2bdb-4738-bc20-556e5e7844e6\",\"moduleSequenceNumber\":123370}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":123370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-762043.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[144,160,7,160,121,37,192,90,22,185,106,117,143,139,92,48,118,50,2,77,17,93,125,20,56,64,30,51,183,30,54,186,181,61,42,182,56,189,189,149,39,155,176],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-525537-Joe'sGuns.cct\",\"type\":\"Total Ways to Sum\",\"data\":13,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-81451-Sector-12.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,0,4,1,9,7,6,0,0,3,2,1,5,7,0],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"50.6.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[6289734,7950,6672,534]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16899.830821665128,\"onlineMoneyMade\":6289734,\"onlineRunningTime\":80424.60999968245,\"pid\":26,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/fd77697d-f24e-4a11-addb-8f7a60f92822\",\"moduleSequenceNumber\":123373}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/fd77697d-f24e-4a11-addb-8f7a60f92822\",\"moduleSequenceNumber\":123373}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":123373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":2000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159552-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[121,52,64,197,130,12,27,200,59,16,23,37,69,146,41,15,127,79,162,152,82,150,64,198,55,65,190,14,6,5,150,32,177,196,198,38,22,14,188,118,46,20]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-273589-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[103,145,2,174,90,33,197,124,68,47,116,164,13,98,189,116,133,99,118,158,111,9,32,71,8,61,171,187,32,95,71,35,151,145,198,195,25,187,31,185,28,88],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"46.4.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":12000000,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-540538.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9953074\",-36],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"11.6.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[14314716,17134,14612,1157]},\"filename\":\"x.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":36688.77893410468,\"onlineMoneyMade\":14314716,\"onlineRunningTime\":80424.60999968245,\"pid\":29,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\n\\tvar mThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\tvar sThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\n\\twhile (ns.hasRootAccess(target)) {\\n\\n\\t\\tif (ns.getServerSecurityLevel(target) > sThresh) {\\n\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < mThresh) {\\n\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\n\\t}\\n}\",\"filename\":\"x.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"x.js\",\"url\":\"blob:https://danielyxie.github.io/6919169e-9014-4815-9e73-76d5fb558cef\",\"moduleSequenceNumber\":343179}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":343179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-79526-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[87,138,143,128,95,23,136,47,100,28,81,124,192,98,116,180,39,12,143,98,156,85,40,74,87,174,42,163,119,114,68,15],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-505125-Joe'sGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,0,-1,1,0,-9,-7,-6,-2,7,-4,9,-3,-8,2,9,-8,-6,-10,9,0,-10,-8,10,-10,2,-7,9,9,-9,6,-5,8,-5,-10,-1,7,-7,6,-6],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"41.0.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":33766730.5,\"moneyMax\":337667305,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":192,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-959313-Joe'sGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":49893755,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131427-Joe'sGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,4,-1,-3,-3,7,4,1,-2,-1,10,1,2,7],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"51.5.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58.5,\"hackDifficulty\":58.5,\"minDifficulty\":20,\"moneyAvailable\":21610352,\"moneyMax\":216103520,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":261,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-101883-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[67,11,136,123,47,168,172,75,165,193,162,105,77,40,135,7,83,123,60,39,175,85,116,68,50,148,142,61,155,14,125,97,11,183,26,198,77,166,6,127,1,93,43,157],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"13.4.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":10000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-538823-TianDiHui.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,8,6,2,0,2,10,9,6,0,1,0,0,9],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-744589.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[117,24,129,98,28,181,134,81,121,19,104,86,32,104,32,185,174,162,192,131,94,69,172,175,109,48,30,168,30,92,125,11,5,176,72,51,132,45,84,31,106,58,120,78,121],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"45.0.0.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"minDifficulty\":26,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":495,\"serverGrowth\":35}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-71145-Joe'sGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":681626412,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-18447-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[55,23,30,65,186,137,91,99,17,41,174,158,91,169,47,13,55,40,58,69,166,198],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"88.5.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":979,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995975.cct\",\"type\":\"Total Ways to Sum\",\"data\":62,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"97.0.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":755,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"46.5.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":513,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-758193-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[172,139,156,198,138,192,102,24,124,33,108,86,4,67,40,95,7,158,8,15,1,144,32,195,103,83,91,28,32,49,116,23,131,163,128,156,106,13,94,29,120,89,40,104,26,20,97,12,104]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"66.1.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":355,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-986957.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[96,45,168,33,96,58,162,173,123,173,158,59,161,15,160,97,21,20,55,45,99,86,138,122,188,109,176,54,58,75,55,78,191,138,64,166,81,54,1,3,99,21,175],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"2.1.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":208,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325086-Joe'sGuns.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,10,0,0,0,7,2,0,2,0,3],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"4.8.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"servs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"foodnstuff\\\",\\r\\n\\\"sigma-cosmetics\\\",\\r\\n\\\"joesguns\\\",\\r\\n\\\"nectar-net\\\",\\r\\n\\\"hong-fang-tea\\\",\\r\\n\\\"harakiri-sushi\\\",\\r\\n\\\"neo-net\\\",\\r\\n\\\"zer0\\\",\\r\\n\\\"max-hardware\\\",\\r\\n\\\"iron-gym\\\",\\r\\n\\\"phantasy\\\",\\r\\n\\\"omega-net\\\",\\r\\n\\\"the-hub\\\",\\r\\n\\\"lexo-corp\\\",\\r\\n\\\"microdyne\\\",\\r\\n\\\"unitalife\\\",\\r\\n\\\"silver-helix\\\",\\r\\n\\\"rho-construction\\\",\\r\\n\\\"netlink\\\",\\r\\n\\\"aevum-police\\\",\\r\\n\\\"summit-uni\\\",\\r\\n\\\"alpha-ent\\\",\\r\\n\\\"solaris\\\",\\r\\n\\\"run4theh111z\\\",\\r\\n\\\"millenium-fitness\\\",\\r\\n\\\"catalyst\\\",\\r\\n\\\"omnia\\\",\\r\\n\\\".\\\",\\r\\n\\\"avmnite-02h\\\",\\r\\n\\\"titan-labs\\\",\\r\\n\\\"zb-institute\\\",\\r\\n\\\"rothman-uni\\\",\\r\\n\\\"univ-energy\\\",\\r\\n\\\"I.I.I.I\\\",\\r\\n\\\"global-pharm\\\",\\r\\n\\\"omnitek\\\",\\r\\n\\\"blade\\\",\\r\\n\\\"fulcrumtech\\\",\\r\\n\\\"helios\\\",\\r\\n\\\"stormtech\\\",\\r\\n\\\"ecorp\\\",\\r\\n\\\"megacorp\\\",\\r\\n\\\"nwo\\\",\\r\\n\\\"kuai-gong\\\",\\r\\n\\\"deltaone\\\",\\r\\n\\\"zeus-med\\\",\\r\\n\\\"zb-def\\\",\\r\\n\\\"infocomm\\\",\\r\\n\\\"taiyang-digital\\\",\\r\\n\\\"end\\\",\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"targs.txt\",\"text\":\"\\\"start\\\",\\r\\n\\\"n00dles\\\",\\r\\n\\\"end\\\",\"}}],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":540,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-528695-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,12],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-293144-TianDiHui.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[10],[7],[21],[40],[44],[48],[32],[36],[41],[35],[27],[1]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"22.3.1.6\",\"isConnectedTo\":true,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"96.7.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"63.1.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"36.4.5.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":12,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"65.8.5.5\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":2,\"cores\":12,\"hashCapacity\":128,\"hashRate\":0.018781523673808892,\"level\":22,\"onlineTimeSeconds\":202353.80000131368,\"totalHashesGenerated\":787.9438278433609}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":12,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"91.6.4.1\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":12,\"hashCapacity\":64,\"hashRate\":0.014512995566125057,\"level\":17,\"onlineTimeSeconds\":202352.00000131357,\"totalHashesGenerated\":457.9684990000893}},\"hacknet-node-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":11,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-2\",\"httpPortOpen\":false,\"ip\":\"22.3.9.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":11,\"hashCapacity\":64,\"hashRate\":0.008227887123455999,\"level\":11,\"onlineTimeSeconds\":187680.80000051748,\"totalHashesGenerated\":64.95991683016213}},\"hacknet-node-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-3\",\"httpPortOpen\":false,\"ip\":\"71.6.2.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.000249329912832,\"level\":1,\"onlineTimeSeconds\":187680.40000051746,\"totalHashesGenerated\":46.794337773049925}},\"hacknet-node-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-4\",\"httpPortOpen\":false,\"ip\":\"79.5.8.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.000249329912832,\"level\":1,\"onlineTimeSeconds\":80448.19999968253,\"totalHashesGenerated\":20.058142693576016}},\"hacknet-node-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-5\",\"httpPortOpen\":false,\"ip\":\"66.9.3.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.000249329912832,\"level\":1,\"onlineTimeSeconds\":80448.19999968253,\"totalHashesGenerated\":20.058142693576016}},\"hacknet-node-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-6\",\"httpPortOpen\":false,\"ip\":\"11.3.8.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.000249329912832,\"level\":1,\"onlineTimeSeconds\":80448.19999968253,\"totalHashesGenerated\":20.058142693576016}},\"hacknet-node-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-7\",\"httpPortOpen\":false,\"ip\":\"84.4.9.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.000249329912832,\"level\":1,\"onlineTimeSeconds\":80448.19999968253,\"totalHashesGenerated\":20.058142693576016}},\"hacknet-node-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-8\",\"httpPortOpen\":false,\"ip\":\"22.1.5.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":1,\"cores\":1,\"hashCapacity\":64,\"hashRate\":0.000249329912832,\"level\":1,\"onlineTimeSeconds\":80448.19999968253,\"totalHashesGenerated\":20.058142693576016}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":39161.58819830898,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":9739.155799697173}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":9719.249379830533}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":96.48067228800238}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":3278.4954760133705}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":5,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":500,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":4,\"opened\":true}}","VersionSave":"11","AllGangsSave":"{\"Slum Snakes\":{\"power\":167.66791656955525,\"territory\":0},\"Tetrads\":{\"power\":32892.315459799225,\"territory\":0},\"The Syndicate\":{\"power\":32636.350630529276,\"territory\":0},\"The Dark Army\":{\"power\":32655.00268674817,\"territory\":0},\"Speakers for the Dead\":{\"power\":30827.84975054911,\"territory\":0},\"NiteSec\":{\"power\":32868.05895341208,\"territory\":0},\"The Black Hand\":{\"power\":136567.82646302687,\"territory\":0.9999999999999976}}","LastExportBonus":"1647790990319","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}